{
  "version": 3,
  "sources": ["https://deno.land/x/silverbullet@0.10.1/lib/plugos/worker_runtime.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/editor.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscall.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/space.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/system.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/asset.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.10.1/lib/crypto.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/datastore.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/models.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/convert.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/default.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/help.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/alea.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/algorithm.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/abstract_scheduler.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/impl/basic_scheduler.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/impl/long_term_scheduler.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/reschedule.ts", "../deno-dir/deno_esbuild/ts-fsrs@4.4.3/node_modules/ts-fsrs/src/fsrs/fsrs.ts", "flashcard.ts", "../tmp/3d211c05b1d2680d.js"],
  "sourcesContent": ["// This is the runtime imported from the compiled plug worker code\nimport type { ControllerMessage, WorkerMessage } from \"./protocol.ts\";\nimport type { ProxyFetchRequest, ProxyFetchResponse } from \"../proxy_fetch.ts\";\n\ndeclare global {\n  function syscall(name: string, ...args: any[]): Promise<any>;\n}\n\nlet workerPostMessage = (_msg: ControllerMessage): void => {\n  throw new Error(\"Not initialized yet\");\n};\n\n// Are we running in a (web) worker?\n\n// Determines if we're running in a web worker environment (Deno or browser)\n// - in a browser's main threads, typeof window is \"object\"\n// - in a browser's worker threads, typeof window === \"undefined\"\n// - in Deno's main thread typeof window === \"object\"\n// - in Deno's workers typeof window === \"undefined\n// - in Cloudflare workers typeof window === \"undefined\", but typeof globalThis.WebSocketPair is defined\nconst runningAsWebWorker = typeof window === \"undefined\" &&\n  // @ts-ignore: globalThis\n  typeof globalThis.WebSocketPair === \"undefined\";\n\nif (typeof Deno === \"undefined\") {\n  // @ts-ignore: Deno hack\n  self.Deno = {\n    args: [],\n    // @ts-ignore: Deno hack\n    build: {\n      arch: \"x86_64\",\n    },\n    env: {\n      // @ts-ignore: Deno hack\n      get() {\n      },\n    },\n  };\n}\n\nconst pendingRequests = new Map<\n  number,\n  {\n    resolve: (result: unknown) => void;\n    reject: (e: any) => void;\n  }\n>();\n\nlet syscallReqId = 0;\n\nif (runningAsWebWorker) {\n  globalThis.syscall = async (name: string, ...args: any[]) => {\n    return await new Promise((resolve, reject) => {\n      syscallReqId++;\n      pendingRequests.set(syscallReqId, { resolve, reject });\n      workerPostMessage({\n        type: \"sys\",\n        id: syscallReqId,\n        name,\n        args,\n      });\n    });\n  };\n}\n\nexport function setupMessageListener(\n  // deno-lint-ignore ban-types\n  functionMapping: Record<string, Function>,\n  manifest: any,\n  postMessageFn: (msg: ControllerMessage) => void,\n) {\n  if (!runningAsWebWorker) {\n    // Don't do any of this stuff if this is not a web worker\n    // This caters to the NoSandbox run mode\n    return;\n  }\n  workerPostMessage = postMessageFn;\n  self.addEventListener(\"message\", (event: { data: WorkerMessage }) => {\n    (async () => {\n      const data = event.data;\n      switch (data.type) {\n        case \"inv\":\n          {\n            const fn = functionMapping[data.name!];\n            if (!fn) {\n              throw new Error(`Function not loaded: ${data.name}`);\n            }\n            try {\n              const result = await Promise.resolve(fn(...(data.args || [])));\n              workerPostMessage({\n                type: \"invr\",\n                id: data.id,\n                result: result,\n              } as ControllerMessage);\n            } catch (e: any) {\n              console.error(\n                \"An exception was thrown as a result of invoking function\",\n                data.name,\n                \"error:\",\n                e.message,\n              );\n              workerPostMessage({\n                type: \"invr\",\n                id: data.id!,\n                error: e.message,\n              });\n            }\n          }\n          break;\n        case \"sysr\":\n          {\n            const syscallId = data.id;\n            const lookup = pendingRequests.get(syscallId);\n            if (!lookup) {\n              throw Error(\"Invalid request id\");\n            }\n            pendingRequests.delete(syscallId);\n            if (data.error) {\n              lookup.reject(new Error(data.error));\n            } else {\n              lookup.resolve(data.result);\n            }\n          }\n\n          break;\n      }\n    })().catch(console.error);\n  });\n  // Signal initialization with manifest\n  workerPostMessage({\n    type: \"manifest\",\n    manifest,\n  });\n}\n\nexport function base64Decode(s: string): Uint8Array {\n  const binString = atob(s);\n  const len = binString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binString.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport function base64Encode(buffer: Uint8Array | string): string {\n  if (typeof buffer === \"string\") {\n    buffer = new TextEncoder().encode(buffer);\n  }\n  let binary = \"\";\n  const len = buffer.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(buffer[i]);\n  }\n  return btoa(binary);\n}\n\nexport async function sandboxFetch(\n  reqInfo: RequestInfo,\n  options?: ProxyFetchRequest,\n): Promise<ProxyFetchResponse> {\n  if (typeof reqInfo !== \"string\") {\n    const body = new Uint8Array(await reqInfo.arrayBuffer());\n    const encodedBody = body.length > 0 ? base64Encode(body) : undefined;\n    options = {\n      method: reqInfo.method,\n      headers: Object.fromEntries(reqInfo.headers.entries()),\n      base64Body: encodedBody,\n    };\n    reqInfo = reqInfo.url;\n  }\n  return syscall(\"sandboxFetch.fetch\", reqInfo, options);\n}\n\n// @ts-ignore: monkey patching fetch\nglobalThis.nativeFetch = globalThis.fetch;\n// Monkey patch fetch()\nexport function monkeyPatchFetch() {\n  // @ts-ignore: monkey patching fetch\n  globalThis.fetch = async function (\n    reqInfo: RequestInfo,\n    init?: RequestInit,\n  ): Promise<Response> {\n    const encodedBody = init && init.body\n      ? base64Encode(\n        new Uint8Array(await (new Response(init.body)).arrayBuffer()),\n      )\n      : undefined;\n    const r = await sandboxFetch(\n      reqInfo,\n      init && {\n        method: init.method,\n        headers: init.headers as Record<string, string>,\n        base64Body: encodedBody,\n      },\n    );\n    return new Response(r.base64Body ? base64Decode(r.base64Body) : null, {\n      status: r.status,\n      headers: r.headers,\n    });\n  };\n}\n\nif (runningAsWebWorker) {\n  monkeyPatchFetch();\n}\n\n// denoCacheMetadata={\"headers\":{\"x-frame-options\":\"DENY\",\"cross-origin-embedder-policy\":\"same-origin\",\"x-cache\":\"Hit from cloudfront\",\"cross-origin-resource-policy\":\"same-origin\",\"x-amz-cf-pop\":\"LHR50-P6\",\"via\":\"http/2 edgeproxy-h\",\"x-content-type-options\":\"nosniff\",\"vary\":\"Accept-Encoding, Origin\",\"access-control-allow-origin\":\"*\",\"x-amz-version-id\":\"yoF0TtLM7ATybE7y3AzFMA1RJNZthmFJ\",\"server\":\"deno/gcp-europe-west2\",\"etag\":\"\\\"099b2158cf5c7fb72c6cc3321a51fdae\\\"\",\"age\":\"1350532\",\"referrer-policy\":\"strict-origin-when-cross-origin\",\"last-modified\":\"Thu, 14 Nov 2024 20:29:01 GMT\",\"x-amz-cf-id\":\"IkntXX91AF2y_ZZK0OpEGtI5ePMu6fvq0lYYYOtB2VkhvMAey3Asig==\",\"x-amz-server-side-encryption\":\"AES256\",\"server-timing\":\"fetchSource;dur=8\",\"cache-control\":\"public, max-age=31536000, immutable\",\"date\":\"Sat, 16 Nov 2024 22:33:12 GMT\",\"content-security-policy\":\"default-src 'none'; style-src 'unsafe-inline'; sandbox\",\"accept-ranges\":\"bytes\",\"content-length\":\"5705\",\"content-type\":\"application/typescript; charset=utf-8\",\"cross-origin-opener-policy\":\"same-origin\",\"x-amz-replication-status\":\"COMPLETED\",\"strict-transport-security\":\"max-age=63072000; includeSubDomains; preload\"},\"url\":\"https://deno.land/x/silverbullet@0.10.1/lib/plugos/worker_runtime.ts\",\"time\":1733146923}", "import type { UploadFile } from \"../types.ts\";\nimport { syscall } from \"../syscall.ts\";\nimport type { PageRef } from \"../lib/page_ref.ts\";\nimport type { FilterOption } from \"../../type/client.ts\";\n\n/**\n * Exposes various editor utilities.\n * Important: These syscalls are only available in the client.\n * @module\n */\n\n/**\n * Returns the name of the page currently open in the editor.\n * @returns the current page name\n */\nexport function getCurrentPage(): Promise<string> {\n  return syscall(\"editor.getCurrentPage\");\n}\n\n/**\n * Returns the full text of the currently open page\n */\nexport function getText(): Promise<string> {\n  return syscall(\"editor.getText\");\n}\n\n/**\n * This updates the editor text, but in a minimal-diff way:\n * it compares the current editor text with the new text, and only sends the changes to the editor, thereby preserving cursor location\n */\nexport function setText(\n  newText: string,\n  isolateHistory = false,\n): Promise<void> {\n  return syscall(\"editor.setText\", newText, isolateHistory);\n}\n\n/**\n * Returns the position (in # of characters from the beginning of the file) of the cursor in the editor\n */\nexport function getCursor(): Promise<number> {\n  return syscall(\"editor.getCursor\");\n}\n\n/**\n * Returns the line number and column number of the cursor in the editor\n */\nexport function getSelection(): Promise<{ from: number; to: number }> {\n  return syscall(\"editor.getSelection\");\n}\n\n/**\n * Sets the position of the cursor in the editor\n * @param from the start position of the selection\n * @param to the end position of the selection\n */\nexport function setSelection(from: number, to: number): Promise<void> {\n  return syscall(\"editor.setSelection\", from, to);\n}\n\n/**\n * Forces a save of the current page\n */\nexport function save(): Promise<void> {\n  return syscall(\"editor.save\");\n}\n\n/**\n * Navigates to the specified page reference\n * @param pageRef the page reference to navigate to\n * @param replaceState whether to replace the current history state in the browser history\n * @param newWindow whether to open the page in a new window\n */\nexport function navigate(\n  pageRef: PageRef,\n  replaceState = false,\n  newWindow = false,\n): Promise<void> {\n  return syscall(\"editor.navigate\", pageRef, replaceState, newWindow);\n}\n\n/**\n * Opens the page navigator\n * @param mode the mode to open the navigator in\n */\nexport function openPageNavigator(\n  mode: \"page\" | \"meta\" | \"all\" = \"page\",\n): Promise<void> {\n  return syscall(\"editor.openPageNavigator\", mode);\n}\n\n/**\n * Opens the command palette\n */\nexport function openCommandPalette(): Promise<void> {\n  return syscall(\"editor.openCommandPalette\");\n}\n\n/**\n * Force reloads the current page\n */\nexport function reloadPage(): Promise<void> {\n  return syscall(\"editor.reloadPage\");\n}\n\n/**\n * Force reloads the browser UI\n */\nexport function reloadUI(): Promise<void> {\n  return syscall(\"editor.reloadUI\");\n}\n\n/**\n * Reloads the config and commands, also in the server\n */\nexport function reloadConfigAndCommands(): Promise<void> {\n  return syscall(\"editor.reloadConfigAndCommands\");\n}\n\n/**\n * Opens the specified URL in the browser\n * @param url the URL to open\n * @param existingWindow whether to open the URL in an existing window\n */\nexport function openUrl(url: string, existingWindow = false): Promise<void> {\n  return syscall(\"editor.openUrl\", url, existingWindow);\n}\n\nexport function newWindow(): Promise<void> {\n  return syscall(\"editor.newWindow\");\n}\n\n/**\n * This is calling the `go()` method from the History Web API.\n * @param delta Position in history to move to relative to the current page,\n * where a negative value moves backwards, and positive forwards\n */\nexport function goHistory(delta: number): Promise<void> {\n  return syscall(\"editor.goHistory\", delta);\n}\n\n/**\n * Force the client to download the file in dataUrl with filename as file name\n * @param filename the name of the file to download\n * @param dataUrl the dataUrl of the file to download\n */\nexport function downloadFile(filename: string, dataUrl: string): Promise<void> {\n  return syscall(\"editor.downloadFile\", filename, dataUrl);\n}\n\n/**\n * Triggers the browser's native file upload dialog/popup\n * @param accept the file types to accept\n * @param capture the capture mode for the file input\n */\nexport function uploadFile(\n  accept?: string,\n  capture?: string,\n): Promise<UploadFile> {\n  return syscall(\"editor.uploadFile\", accept, capture);\n}\n\n/**\n * Shows a flash notification to the user (top right corner)\n * @param message the message to show\n * @param type the type of notification to show\n */\nexport function flashNotification(\n  message: string,\n  type: \"info\" | \"error\" = \"info\",\n): Promise<void> {\n  return syscall(\"editor.flashNotification\", message, type);\n}\n\n/**\n * Exposes a filter box UI (similar to the page navigator and command palette)\n * @param label the label to show left of the input box\n * @param options the options to show and to filter on\n * @param helpText the help text to show below the input box\n * @param placeHolder the placeholder text to show in the input box\n */\nexport function filterBox(\n  label: string,\n  options: FilterOption[],\n  helpText = \"\",\n  placeHolder = \"\",\n): Promise<FilterOption | undefined> {\n  return syscall(\"editor.filterBox\", label, options, helpText, placeHolder);\n}\n\n/**\n * Shows a panel in the editor\n * @param id the location of the panel to show\n * @param mode the mode or \"size\" of the panel\n * @param html the html content of the panel\n * @param script the script content of the panel\n */\nexport function showPanel(\n  id: \"lhs\" | \"rhs\" | \"bhs\" | \"modal\",\n  mode: number,\n  html: string,\n  script = \"\",\n): Promise<void> {\n  return syscall(\"editor.showPanel\", id, mode, html, script);\n}\n\n/**\n * Hides a panel in the editor\n * @param id the location of the panel to hide\n */\nexport function hidePanel(\n  id: \"lhs\" | \"rhs\" | \"bhs\" | \"modal\",\n): Promise<void> {\n  return syscall(\"editor.hidePanel\", id);\n}\n\n/**\n * Insert text at the specified position into the editor\n * @param text the text to insert\n * @param pos\n */\nexport function insertAtPos(text: string, pos: number): Promise<void> {\n  return syscall(\"editor.insertAtPos\", text, pos);\n}\n\n/**\n * Replace the text in the specified range in the editor\n * @param from the start position of the range\n * @param to the end position of the range\n * @param text the text to replace with\n */\nexport function replaceRange(\n  from: number,\n  to: number,\n  text: string,\n): Promise<void> {\n  return syscall(\"editor.replaceRange\", from, to, text);\n}\n\n/**\n * Move the cursor to the specified position in the editor\n * @param pos the position to move the cursor to\n * @param center whether to center the cursor in the editor after moving\n */\nexport function moveCursor(pos: number, center = false): Promise<void> {\n  return syscall(\"editor.moveCursor\", pos, center);\n}\n\n/**\n * Move the cursor to the specified line and column in the editor\n * @param line the line number to move the cursor to\n * @param column the column number to move the cursor to\n * @param center whether to center the cursor in the editor after moving\n */\nexport function moveCursorToLine(\n  line: number,\n  column = 1,\n  center = false,\n): Promise<void> {\n  return syscall(\"editor.moveCursorToLine\", line, column, center);\n}\n\n/**\n * Insert text at the cursor position in the editor\n * @param text the text to insert\n */\nexport function insertAtCursor(text: string): Promise<void> {\n  return syscall(\"editor.insertAtCursor\", text);\n}\n\n/**\n * Dispatch a CodeMirror transaction: https://codemirror.net/docs/ref/#state.Transaction\n */\nexport function dispatch(change: any): Promise<void> {\n  return syscall(\"editor.dispatch\", change);\n}\n\n/**\n * Prompt the user for text input\n * @param message the message to show in the prompt\n * @param defaultValue a default value pre-filled in the prompt\n * @returns\n */\nexport function prompt(\n  message: string,\n  defaultValue = \"\",\n): Promise<string | undefined> {\n  return syscall(\"editor.prompt\", message, defaultValue);\n}\n\n/**\n * Prompt the user for confirmation\n * @param message the message to show in the confirmation dialog\n * @returns\n */\nexport function confirm(\n  message: string,\n): Promise<boolean> {\n  return syscall(\"editor.confirm\", message);\n}\n\n/**\n * Get the value of a UI option\n * @param key the key of the UI option to get\n * @returns\n */\nexport function getUiOption(key: string): Promise<any> {\n  return syscall(\"editor.getUiOption\", key);\n}\n\n/**\n * Set the value of a UI option\n * @param key the key of the UI option to set\n * @param value the value to set the UI option to\n */\nexport function setUiOption(key: string, value: any): Promise<void> {\n  return syscall(\"editor.setUiOption\", key, value);\n}\n\n/**\n * Perform a fold at the current cursor position\n */\nexport function fold(): Promise<void> {\n  return syscall(\"editor.fold\");\n}\n\n/**\n * Perform an unfold at the current cursor position\n */\nexport function unfold(): Promise<void> {\n  return syscall(\"editor.unfold\");\n}\n\n/**\n * Toggle the fold at the current cursor position\n */\nexport function toggleFold(): Promise<void> {\n  return syscall(\"editor.toggleFold\");\n}\n\n/**\n * Fold all code blocks in the editor\n */\nexport function foldAll(): Promise<void> {\n  return syscall(\"editor.foldAll\");\n}\n\n/**\n * Unfold all code blocks in the editor\n */\nexport function unfoldAll(): Promise<void> {\n  return syscall(\"editor.unfoldAll\");\n}\n\n/**\n * Perform an undo operation of the last edit in the editor\n */\nexport function undo(): Promise<void> {\n  return syscall(\"editor.undo\");\n}\n\n/**\n * Perform a redo operation of the last undo in the editor\n */\nexport function redo(): Promise<void> {\n  return syscall(\"editor.redo\");\n}\n\n/**\n * Open the editor's native search panel\n */\nexport function openSearchPanel(): Promise<void> {\n  return syscall(\"editor.openSearchPanel\");\n}\n\n/**\n * Copy the specified data to the clipboard\n * @param data the data to copy\n */\nexport function copyToClipboard(data: string | Blob): Promise<void> {\n  return syscall(\"editor.copyToClipboard\", data);\n}\n\n/**\n * Delete the current line in the editor\n */\nexport function deleteLine(): Promise<void> {\n  return syscall(\"editor.deleteLine\");\n}\n\n// Vim-mode specific syscalls\n\n/**\n * Execute a Vim ex command\n * @param exCommand the ex command to execute\n */\nexport function vimEx(exCommand: string): Promise<any> {\n  return syscall(\"editor.vimEx\", exCommand);\n}\n\n// denoCacheMetadata={\"headers\":{\"x-goog-stored-content-length\":\"10378\",\"x-guploader-uploadid\":\"AFiumC51pfEAeTyid1ib3nYgGy8fD0nS9I1J5oOi2tflet5p85RqAMImrx2cjQ70WlputvCWg34\",\"access-control-allow-origin\":\"*\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"x-goog-stored-content-encoding\":\"identity\",\"expires\":\"Tue, 02 Dec 2025 13:42:04 GMT\",\"content-length\":\"10378\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"x-jsr-cache-id\":\"PAR-8ec5b013\",\"cache-control\":\"public, max-age=31536000, immutable\",\"etag\":\"\\\"2da2bb30e03c22c1cfb7ebdc016c18af\\\"\",\"content-type\":\"text/typescript\",\"cross-origin-resource-policy\":\"cross-origin\",\"via\":\"1.1 google\",\"x-goog-storage-class\":\"STANDARD\",\"x-content-type-options\":\"nosniff\",\"last-modified\":\"Thu, 14 Nov 2024 20:29:33 GMT\",\"x-goog-hash\":\"crc32c=Wz1DJA==,md5=LaK7MOA8IsHPt+vcAWwYrw==\",\"x-goog-generation\":\"1731616173070607\",\"server\":\"UploadServer\",\"date\":\"Mon, 02 Dec 2024 13:42:04 GMT\",\"x-jsr-cache-status\":\"miss\",\"accept-ranges\":\"bytes\",\"access-control-expose-headers\":\"*\",\"x-robots-tag\":\"noindex\",\"x-goog-metageneration\":\"1\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/editor.ts\",\"time\":1733146924}", "// declare global {\n//   function syscall(name: string, ...args: any[]): Promise<any>;\n// }\n\n// This is the case when running tests only, so giving it a dummy syscall function\nif (typeof self === \"undefined\") {\n  (self as any) = {\n    syscall: () => {\n      throw new Error(\"Not implemented here\");\n    },\n  };\n}\n\n// Late binding syscall\nexport function syscall(name: string, ...args: any[]): Promise<any> {\n  return (globalThis as any).syscall(name, ...args);\n}\n\n// denoCacheMetadata={\"headers\":{\"x-jsr-cache-status\":\"miss\",\"expires\":\"Tue, 02 Dec 2025 13:42:04 GMT\",\"access-control-expose-headers\":\"*\",\"x-jsr-cache-id\":\"PAR-8ec5b013\",\"etag\":\"\\\"7f51ff650cbb44cc057590677d146ea8\\\"\",\"x-goog-stored-content-length\":\"463\",\"x-goog-hash\":\"crc32c=OlP20w==,md5=f1H/ZQy7RMwFdZBnfRRuqA==\",\"x-robots-tag\":\"noindex\",\"content-length\":\"463\",\"last-modified\":\"Thu, 14 Nov 2024 20:29:33 GMT\",\"x-goog-generation\":\"1731616173690053\",\"content-type\":\"text/typescript\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"accept-ranges\":\"bytes\",\"access-control-allow-origin\":\"*\",\"x-goog-metageneration\":\"1\",\"date\":\"Mon, 02 Dec 2024 13:42:04 GMT\",\"x-goog-storage-class\":\"STANDARD\",\"server\":\"UploadServer\",\"x-goog-stored-content-encoding\":\"identity\",\"cross-origin-resource-policy\":\"cross-origin\",\"x-guploader-uploadid\":\"AFiumC76idN3fF0DXVhbDI6VtxE1Otb_2ZThF_sMAFZZFrZhRNHWrn1SNqNJp5BnC-aKFtI6yK0\",\"cache-control\":\"public, max-age=31536000, immutable\",\"via\":\"1.1 google\",\"x-content-type-options\":\"nosniff\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscall.ts\",\"time\":1733146924}", "import { syscall } from \"../syscall.ts\";\nimport type { AttachmentMeta, FileMeta, PageMeta } from \"../types.ts\";\n\n/**\n * Exposes the space with its pages, attachments and plugs.\n * @module\n */\n\n/**\n * Lists all pages (files ending in .md) in the space.\n * @param unfiltered\n * @returns a list of all pages in the space represented as PageMeta objects\n */\nexport function listPages(): Promise<PageMeta[]> {\n  return syscall(\"space.listPages\");\n}\n\n/**\n * Get metadata for a page in the space.\n * @param name the name of the page to get metadata for\n * @returns the metadata for the page\n */\nexport function getPageMeta(name: string): Promise<PageMeta> {\n  return syscall(\"space.getPageMeta\", name);\n}\n\n/**\n * Read a page from the space as text.\n * @param name the name of the page to read\n * @returns the text of the page\n */\nexport function readPage(\n  name: string,\n): Promise<string> {\n  return syscall(\"space.readPage\", name);\n}\n\n/**\n * Write a page to the space.\n * @param name the name of the page to write\n * @param text the text of the page to write\n * @returns the metadata for the written page\n */\nexport function writePage(name: string, text: string): Promise<PageMeta> {\n  return syscall(\"space.writePage\", name, text);\n}\n\n/**\n * Delete a page from the space.\n * @param name the name of the page to delete\n */\nexport function deletePage(name: string): Promise<void> {\n  return syscall(\"space.deletePage\", name);\n}\n\n/**\n * List all plugs in the space.\n * @returns a list of all plugs in the space represented as FileMeta objects\n */\nexport function listPlugs(): Promise<FileMeta[]> {\n  return syscall(\"space.listPlugs\");\n}\n\n/**\n * Lists all attachments in the space (all files not ending in .md).\n * @returns a list of all attachments in the space represented as AttachmentMeta objects\n */\nexport function listAttachments(): Promise<AttachmentMeta[]> {\n  return syscall(\"space.listAttachments\");\n}\n\n/**\n * Get metadata for an attachment in the space.\n * @param name the path of the attachment to get metadata for\n * @returns the metadata for the attachment\n */\nexport function getAttachmentMeta(name: string): Promise<AttachmentMeta> {\n  return syscall(\"space.getAttachmentMeta\", name);\n}\n\n/**\n * Read an attachment from the space\n * @param name path of the attachment to read\n * @returns the attachment data encoded as a data URL\n */\nexport function readAttachment(\n  name: string,\n): Promise<Uint8Array> {\n  return syscall(\"space.readAttachment\", name);\n}\n\n/**\n * Writes an attachment to the space\n * @param name path of the attachment to write\n * @param data data itself\n * @returns\n */\nexport function writeAttachment(\n  name: string,\n  data: Uint8Array,\n): Promise<AttachmentMeta> {\n  return syscall(\"space.writeAttachment\", name, data);\n}\n\n/**\n * Deletes an attachment from the space\n * @param name path of the attachment to delete\n */\nexport function deleteAttachment(name: string): Promise<void> {\n  return syscall(\"space.deleteAttachment\", name);\n}\n\n// Lower level-file operations\n\n/**\n * List all files in the space (pages, attachments and plugs).\n * @returns a list of all files in the space represented as FileMeta objects\n */\nexport function listFiles(): Promise<FileMeta[]> {\n  return syscall(\"space.listFiles\");\n}\n\n/**\n * Read a file from the space as a Uint8Array.\n * @param name the name of the file to read\n * @returns the data of the file\n */\nexport function readFile(name: string): Promise<Uint8Array> {\n  return syscall(\"space.readFile\", name);\n}\n\n/**\n * Get metadata for a file in the space.\n * @param name the name of the file to get metadata for\n * @returns the metadata for the file\n */\nexport function getFileMeta(name: string): Promise<FileMeta> {\n  return syscall(\"space.getFileMeta\", name);\n}\n\n/**\n * Write a file to the space.\n * @param name the name of the file to write\n * @param data the data of the file to write\n * @returns the metadata for the written file\n */\nexport function writeFile(\n  name: string,\n  data: Uint8Array,\n): Promise<FileMeta> {\n  return syscall(\"space.writeFile\", name, data);\n}\n\n/**\n * Delete a file from the space.\n * @param name the name of the file to delete\n */\nexport function deleteFile(name: string): Promise<void> {\n  return syscall(\"space.deleteFile\", name);\n}\n\nexport function fileExists(name: string): Promise<boolean> {\n  return syscall(\"space.fileExists\", name);\n}\n\n// denoCacheMetadata={\"headers\":{\"date\":\"Mon, 02 Dec 2024 13:42:04 GMT\",\"cache-control\":\"public, max-age=31536000, immutable\",\"server\":\"UploadServer\",\"x-robots-tag\":\"noindex\",\"access-control-expose-headers\":\"*\",\"via\":\"1.1 google\",\"access-control-allow-origin\":\"*\",\"expires\":\"Tue, 02 Dec 2025 13:42:04 GMT\",\"etag\":\"\\\"fae8be9c117b2fcf2850b52dab7c3e65\\\"\",\"x-jsr-cache-status\":\"miss\",\"x-guploader-uploadid\":\"AFiumC6SWmWDTVFMbsEh0QXX_DRdvOYbFj9TwURjplwpfbEqk5XdoQMkQDH1ypJKnn-9Z7LRV8o\",\"cross-origin-resource-policy\":\"cross-origin\",\"last-modified\":\"Thu, 14 Nov 2024 20:29:33 GMT\",\"x-content-type-options\":\"nosniff\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"x-goog-generation\":\"1731616173618787\",\"x-goog-stored-content-encoding\":\"identity\",\"x-goog-hash\":\"crc32c=pMDEiA==,md5=+ui+nBF7L88oULUtq3w+ZQ==\",\"x-jsr-cache-id\":\"PAR-8ec5b013\",\"x-goog-storage-class\":\"STANDARD\",\"x-goog-metageneration\":\"1\",\"content-length\":\"4342\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"accept-ranges\":\"bytes\",\"content-type\":\"text/typescript\",\"x-goog-stored-content-length\":\"4342\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/space.ts\",\"time\":1733146924}", "import type { CommandDef } from \"../../lib/command.ts\";\nimport type { SyscallMeta } from \"../types.ts\";\nimport type { ParseTree } from \"../lib/tree.ts\";\nimport { syscall } from \"../syscall.ts\";\nimport type { Config } from \"../../type/config.ts\";\n\n/**\n * System level syscalls\n * @module\n */\n\n/**\n * Invoke a plug function\n * @param name a string representing the name of the function to invoke (\"plug.functionName\")\n * @param args arguments to pass to the function\n * @returns\n */\nexport function invokeFunction(\n  name: string,\n  ...args: any[]\n): Promise<any> {\n  return syscall(\"system.invokeFunction\", name, ...args);\n}\n\n/**\n * Invoke a client command by name\n * Note: only available on the client\n * @param name name of the command\n * @param args arguments to pass to the command\n */\nexport function invokeCommand(name: string, args?: string[]): Promise<any> {\n  return syscall(\"system.invokeCommand\", name, args);\n}\n\n/**\n * Lists all commands available\n * @returns a map of all available commands\n */\nexport function listCommands(): Promise<Record<string, CommandDef>> {\n  return syscall(\"system.listCommands\");\n}\n\n/**\n * Lists all syscalls available\n * @returns a list of all available syscalls\n */\nexport function listSyscalls(): Promise<SyscallMeta[]> {\n  return syscall(\"system.listSyscalls\");\n}\n\n/**\n * Invoke a space function by name\n * @param name a string representing the name of the function to invoke\n * @param args arguments to pass to the function\n * @returns the value returned by the function\n */\nexport function invokeSpaceFunction(\n  name: string,\n  ...args: any[]\n): Promise<any> {\n  return syscall(\"system.invokeSpaceFunction\", name, ...args);\n}\n\n/**\n * Applies attribute extractors to a ParseTree\n */\nexport function applyAttributeExtractors(\n  tags: string[],\n  text: string,\n  tree: ParseTree,\n): Promise<Record<string, any>[]> {\n  return syscall(\"system.applyAttributeExtractors\", tags, text, tree);\n}\n\n/**\n * Loads a particular space configuration key (or all of them when no key is spacified)\n * @param key the key to load, when not specified, all keys are loaded\n * @param defaultValue the default value to return when the key is not found\n * @returns either the value of the key or all keys as a Record<string, any>\n */\nexport async function getSpaceConfig(\n  key?: string,\n  defaultValue?: any,\n): Promise<any> {\n  return (await syscall(\"system.getSpaceConfig\", key)) ?? defaultValue;\n}\n\n/**\n * Trigger a reload of all plugs\n * @returns\n */\nexport function reloadPlugs(): Promise<void> {\n  return syscall(\"system.reloadPlugs\");\n}\n\n/**\n * Trigger an explicit reload of the configuration\n * @returns the new configuration\n */\nexport function reloadConfig(): Promise<Config> {\n  return syscall(\"system.reloadConfig\");\n}\n\n/**\n * Returns what runtime environment this plug is run in, e.g. \"server\" or \"client\" can be undefined, which would mean a hybrid environment (such as mobile)\n */\nexport function getEnv(): Promise<string | undefined> {\n  return syscall(\"system.getEnv\");\n}\n\n/**\n * Returns the current mode of the system, either \"ro\" (read-only) or \"rw\" (read-write)\n */\nexport function getMode(): Promise<\"ro\" | \"rw\"> {\n  return syscall(\"system.getMode\");\n}\n\n/**\n * Returns the SilverBullet version\n */\nexport function getVersion(): Promise<string> {\n  return syscall(\"system.getVersion\");\n}\n\n// denoCacheMetadata={\"headers\":{\"date\":\"Mon, 02 Dec 2024 13:42:04 GMT\",\"cache-control\":\"public, max-age=31536000, immutable\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"x-goog-stored-content-encoding\":\"identity\",\"x-goog-metageneration\":\"1\",\"x-goog-hash\":\"crc32c=ZWMKMQ==,md5=vLzMAKeXT63NWyxxSXtITw==\",\"x-goog-storage-class\":\"STANDARD\",\"server\":\"UploadServer\",\"via\":\"1.1 google\",\"x-jsr-cache-id\":\"PAR-8ec5b013\",\"content-length\":\"3328\",\"x-goog-stored-content-length\":\"3328\",\"x-goog-generation\":\"1731616173602074\",\"accept-ranges\":\"bytes\",\"x-jsr-cache-status\":\"miss\",\"access-control-allow-origin\":\"*\",\"content-type\":\"text/typescript\",\"last-modified\":\"Thu, 14 Nov 2024 20:29:33 GMT\",\"access-control-expose-headers\":\"*\",\"etag\":\"\\\"bcbccc00a7974fadcd5b2c71497b484f\\\"\",\"cross-origin-resource-policy\":\"cross-origin\",\"x-content-type-options\":\"nosniff\",\"expires\":\"Tue, 02 Dec 2025 13:42:04 GMT\",\"x-robots-tag\":\"noindex\",\"x-guploader-uploadid\":\"AFiumC5X18R2_d37bH8cOZ3UNxCrpnFhUoFi58bbBAOp3WWBn3sebhPWVWaCGs_lafyx7bDkSALdBJyVZw\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/system.ts\",\"time\":1733146924}", "import { base64DecodeDataUrl } from \"../../lib/crypto.ts\";\nimport { syscall } from \"../syscall.ts\";\n\n/**\n * Reads an asset embedded in a plug (via the `assets` field in the plug manifest).\n * @param plugName name of the plug to read asset from\n * @param name name of the asset to read\n * @param encoding either \"utf8\" or \"dataurl\"\n * @returns the content of the asset in the requested encoding\n */\nexport async function readAsset(\n  plugName: string,\n  name: string,\n  encoding: \"utf8\" | \"dataurl\" = \"utf8\",\n): Promise<string> {\n  const dataUrl = await syscall(\"asset.readAsset\", plugName, name) as string;\n  switch (encoding) {\n    case \"utf8\":\n      return new TextDecoder().decode(base64DecodeDataUrl(dataUrl));\n    case \"dataurl\":\n      return dataUrl;\n  }\n}\n\n// denoCacheMetadata={\"headers\":{\"via\":\"1.1 google\",\"cross-origin-resource-policy\":\"cross-origin\",\"x-content-type-options\":\"nosniff\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"last-modified\":\"Thu, 14 Nov 2024 20:29:33 GMT\",\"x-robots-tag\":\"noindex\",\"cache-control\":\"public, max-age=31536000, immutable\",\"x-goog-stored-content-encoding\":\"identity\",\"x-goog-stored-content-length\":\"763\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"accept-ranges\":\"bytes\",\"access-control-expose-headers\":\"*\",\"x-jsr-cache-status\":\"miss\",\"content-length\":\"763\",\"expires\":\"Tue, 02 Dec 2025 13:42:04 GMT\",\"x-goog-generation\":\"1731616173574242\",\"etag\":\"\\\"5ec0fd8c07728eedc485a58ae4d5004a\\\"\",\"date\":\"Mon, 02 Dec 2024 13:42:04 GMT\",\"server\":\"UploadServer\",\"x-goog-storage-class\":\"STANDARD\",\"x-goog-metageneration\":\"1\",\"x-jsr-cache-id\":\"PAR-8ec5b013\",\"access-control-allow-origin\":\"*\",\"content-type\":\"text/typescript\",\"x-guploader-uploadid\":\"AFiumC6aTYg3An_WGLiuCSaTPvj1IfiqINUlrN-j63sLiAb0ewhN2v7QoZYCnm26GifLK_RXxnw\",\"x-goog-hash\":\"crc32c=cX20Sg==,md5=XsD9jAdyju3EhaWK5NUASg==\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/asset.ts\",\"time\":1733146924}", "export function simpleHash(s: string): number {\n  let hash = 0,\n    i,\n    chr;\n  if (s.length === 0) return hash;\n  for (i = 0; i < s.length; i++) {\n    chr = s.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n}\n\nexport function base64Decode(s: string): Uint8Array {\n  const binString = atob(s);\n  const len = binString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binString.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport function base64Encode(buffer: Uint8Array | string): string {\n  if (typeof buffer === \"string\") {\n    buffer = new TextEncoder().encode(buffer);\n  }\n  let binary = \"\";\n  const len = buffer.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(buffer[i]);\n  }\n  return btoa(binary);\n}\n\nexport function base64EncodedDataUrl(\n  mimeType: string,\n  buffer: Uint8Array,\n): string {\n  return `data:${mimeType};base64,${base64Encode(buffer)}`;\n}\n\nexport function base64DecodeDataUrl(dataUrl: string): Uint8Array {\n  const b64Encoded = dataUrl.split(\",\", 2)[1];\n  return base64Decode(b64Encoded);\n}\n\n// denoCacheMetadata={\"headers\":{\"cache-control\":\"public, max-age=31536000, immutable\",\"x-goog-metageneration\":\"1\",\"etag\":\"\\\"baf8705ec732bd032a24b0140b8cdab7\\\"\",\"x-goog-storage-class\":\"STANDARD\",\"accept-ranges\":\"bytes\",\"x-guploader-uploadid\":\"AFiumC6ZJ2IETJVTYzLyGmqjSRlJH_gVa4DMvae4oqLrPTd7hxNcKw6XXanJ7bF-ljnf4Lry0fw\",\"last-modified\":\"Thu, 14 Nov 2024 20:29:33 GMT\",\"x-goog-stored-content-encoding\":\"identity\",\"cross-origin-resource-policy\":\"cross-origin\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"content-length\":\"1153\",\"expires\":\"Tue, 02 Dec 2025 13:42:04 GMT\",\"x-goog-generation\":\"1731616173712245\",\"access-control-allow-origin\":\"*\",\"content-type\":\"text/typescript\",\"x-goog-hash\":\"crc32c=x5JhOQ==,md5=uvhwXscyvQMqJLAUC4zatw==\",\"date\":\"Mon, 02 Dec 2024 13:42:04 GMT\",\"x-goog-stored-content-length\":\"1153\",\"x-content-type-options\":\"nosniff\",\"server\":\"UploadServer\",\"x-robots-tag\":\"noindex\",\"x-jsr-cache-status\":\"miss\",\"x-jsr-cache-id\":\"PAR-8ec5b013\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"access-control-expose-headers\":\"*\",\"via\":\"1.1 google\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.10.1/lib/crypto.ts\",\"time\":1733146924}", "import { syscall } from \"../syscall.ts\";\nimport type { KV, KvKey, KvQuery } from \"../types.ts\";\n\n/**\n * Exposes a key value story with query capabilities.\n * @module\n */\n\n/**\n * Sets a value in the key value store.\n * @param key the key to set\n * @param value the value to set\n */\nexport function set(key: KvKey, value: any): Promise<void> {\n  return syscall(\"datastore.set\", key, value);\n}\n\n/**\n * Sets multiple values in the key value store.\n * @param kvs the key value pairs to set\n */\nexport function batchSet(kvs: KV[]): Promise<void> {\n  return syscall(\"datastore.batchSet\", kvs);\n}\n\n/**\n * Gets a value from the key value store.\n * @param key the key to get\n * @returns the value associated with the key (or undefined if not found)\n */\nexport function get(key: KvKey): Promise<any | undefined> {\n  return syscall(\"datastore.get\", key);\n}\n\n/**\n * Gets multiple values from the key value store.\n * @param keys the keys to get\n * @returns the values associated with the keys (or undefined if not found)\n */\nexport function batchGet(keys: KvKey[]): Promise<(any | undefined)[]> {\n  return syscall(\"datastore.batchGet\", keys);\n}\n\n/**\n * Deletes a value from the key value store.\n * @param key the key to delete\n */\nexport function del(key: KvKey): Promise<void> {\n  return syscall(\"datastore.delete\", key);\n}\n\n/**\n * Deletes multiple values from the key value store.\n * @param keys the keys to delete\n */\nexport function batchDel(keys: KvKey[]): Promise<void> {\n  return syscall(\"datastore.batchDelete\", keys);\n}\n\n/**\n * Queries the key value store.\n * @param query the query to run\n * @param variables the variables that can be referenced inside the query\n * @returns the results of the query\n */\nexport function query(\n  query: KvQuery,\n  variables: Record<string, any> = {},\n): Promise<KV[]> {\n  return syscall(\"datastore.query\", query, variables);\n}\n\n/**\n * Queries the key value store and deletes all matching items\n * @param query the query to run\n * @param variables the variables that can be referenced inside the query\n */\nexport function queryDelete(\n  query: KvQuery,\n  variables?: Record<string, any>,\n): Promise<void> {\n  return syscall(\"datastore.queryDelete\", query, variables);\n}\n\n/**\n * Lists all functions currently defined and available for use in queries\n * @returns the names of all functions in the key value store\n */\nexport function listFunctions(): Promise<string[]> {\n  return syscall(\"datastore.listFunctions\");\n}\n\n// denoCacheMetadata={\"headers\":{\"x-jsr-cache-status\":\"miss\",\"x-goog-stored-content-encoding\":\"identity\",\"x-goog-generation\":\"1731616173757674\",\"access-control-expose-headers\":\"*\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"cross-origin-resource-policy\":\"cross-origin\",\"x-goog-hash\":\"crc32c=YhlNSw==,md5=fUNch3F7cJgnqyUUH5WCgw==\",\"content-type\":\"text/typescript\",\"content-length\":\"2443\",\"x-guploader-uploadid\":\"AFiumC5pLZDCtWxp2zYUM3ex6VqaEdwdpnoXFAt4GmE76EHS4NPvbL0AvtL-DgLUJVlPZB726HE\",\"accept-ranges\":\"bytes\",\"cache-control\":\"public, max-age=31536000, immutable\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"access-control-allow-origin\":\"*\",\"x-robots-tag\":\"noindex\",\"expires\":\"Tue, 02 Dec 2025 13:42:04 GMT\",\"date\":\"Mon, 02 Dec 2024 13:42:04 GMT\",\"etag\":\"\\\"7d435c87717b709827ab25141f958283\\\"\",\"last-modified\":\"Thu, 14 Nov 2024 20:29:33 GMT\",\"x-goog-stored-content-length\":\"2443\",\"x-content-type-options\":\"nosniff\",\"x-goog-metageneration\":\"1\",\"server\":\"UploadServer\",\"x-goog-storage-class\":\"STANDARD\",\"via\":\"1.1 google\",\"x-jsr-cache-id\":\"PAR-8ec5b013\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.10.1/plug-api/syscalls/datastore.ts\",\"time\":1733146924}", "export type StateType = 'New' | 'Learning' | 'Review' | 'Relearning'\n\nexport enum State {\n  New = 0,\n  Learning = 1,\n  Review = 2,\n  Relearning = 3,\n}\n\nexport type RatingType = 'Manual' | 'Again' | 'Hard' | 'Good' | 'Easy'\n\nexport enum Rating {\n  Manual = 0,\n  Again = 1,\n  Hard = 2,\n  Good = 3,\n  Easy = 4,\n}\n\ntype ExcludeManual<T> = Exclude<T, Rating.Manual>\n\nexport type Grade = ExcludeManual<Rating>\n\nexport interface ReviewLog {\n  rating: Rating // Rating of the review (Again, Hard, Good, Easy)\n  state: State // State of the review (New, Learning, Review, Relearning)\n  due: Date // Date of the last scheduling\n  stability: number // Memory stability during the review\n  difficulty: number // Difficulty of the card during the review\n  elapsed_days: number // Number of days elapsed since the last review\n  last_elapsed_days: number // Number of days between the last two reviews\n  scheduled_days: number // Number of days until the next review\n  review: Date // Date of the review\n}\n\nexport type RecordLogItem = {\n  card: Card\n  log: ReviewLog\n}\nexport type RecordLog = {\n  [key in Grade]: RecordLogItem\n}\n\nexport interface Card {\n  due: Date // Due date\n  stability: number // Stability\n  difficulty: number // Difficulty level\n  elapsed_days: number // Number of days elapsed\n  scheduled_days: number // Number of days scheduled\n  reps: number // Repetition count\n  lapses: number // Number of lapses or mistakes\n  state: State // Card's state (New, Learning, Review, Relearning)\n  last_review?: Date // Date of the last review (optional)\n}\n\nexport interface CardInput extends Omit<Card, 'state' | 'due' | 'last_review'> {\n  state: StateType | State // Card's state (New, Learning, Review, Relearning)\n  due: DateInput // Due date\n  last_review?: DateInput | null // Date of the last review (optional)\n}\n\nexport type DateInput = Date | number | string\n\nexport interface ReviewLogInput\n  extends Omit<ReviewLog, 'rating' | 'state' | 'due' | 'review'> {\n  rating: RatingType | Rating // Rating of the review (Again, Hard, Good, Easy)\n  state: StateType | State // Card's state (New, Learning, Review, Relearning)\n  due: DateInput // Due date\n  review: DateInput // Date of the last review\n}\n\nexport interface FSRSParameters {\n  request_retention: number\n  maximum_interval: number\n  w: number[]\n  enable_fuzz: boolean\n  enable_short_term: boolean\n}\n\nexport interface FSRSReview {\n  /**\n   * 0-4: Manual, Again, Hard, Good, Easy\n   * = revlog.rating\n   */\n  rating: Rating\n  /**\n   * The number of days that passed\n   * = revlog.elapsed_days\n   * = round(revlog[-1].review - revlog[-2].review)\n   */\n  delta_t: number\n}\n\nexport type FSRSHistory = Partial<\n  Omit<ReviewLog, 'rating' | 'review' | 'elapsed_days'>\n> &\n  (\n    | {\n        rating: Grade\n        review: DateInput | Date\n      }\n    | {\n        rating: Rating.Manual\n        due: DateInput | Date\n        state: State\n        review: DateInput | Date\n      }\n  )\n", "import {\n  Card,\n  CardInput,\n  DateInput,\n  Rating,\n  ReviewLog,\n  ReviewLogInput,\n  State,\n} from './models'\n\nexport class TypeConvert {\n  static card<T extends Card | CardInput>(card: T): Card {\n    return {\n      ...card,\n      state: TypeConvert.state(card.state),\n      due: TypeConvert.time(card.due),\n      last_review: card.last_review\n        ? TypeConvert.time(card.last_review)\n        : undefined,\n    } as Card\n  }\n  static rating(value: unknown): Rating {\n    if (typeof value === 'string') {\n      const firstLetter = value.charAt(0).toUpperCase()\n      const restOfString = value.slice(1).toLowerCase()\n      const ret = Rating[`${firstLetter}${restOfString}` as keyof typeof Rating]\n      if (ret === undefined) {\n        throw new Error(`Invalid rating:[${value}]`)\n      }\n      return ret\n    } else if (typeof value === 'number') {\n      return value as Rating\n    }\n    throw new Error(`Invalid rating:[${value}]`)\n  }\n  static state(value: unknown): State {\n    if (typeof value === 'string') {\n      const firstLetter = value.charAt(0).toUpperCase()\n      const restOfString = value.slice(1).toLowerCase()\n      const ret = State[`${firstLetter}${restOfString}` as keyof typeof State]\n      if (ret === undefined) {\n        throw new Error(`Invalid state:[${value}]`)\n      }\n      return ret\n    } else if (typeof value === 'number') {\n      return value as State\n    }\n    throw new Error(`Invalid state:[${value}]`)\n  }\n  static time(value: unknown): Date {\n    if (typeof value === 'object' && value instanceof Date) {\n      return value\n    } else if (typeof value === 'string') {\n      const timestamp = Date.parse(value)\n      if (!isNaN(timestamp)) {\n        return new Date(timestamp)\n      } else {\n        throw new Error(`Invalid date:[${value}]`)\n      }\n    } else if (typeof value === 'number') {\n      return new Date(value)\n    }\n    throw new Error(`Invalid date:[${value}]`)\n  }\n  static review_log(log: ReviewLogInput | ReviewLog): ReviewLog {\n    return {\n      ...log,\n      due: TypeConvert.time(log.due),\n      rating: TypeConvert.rating(log.rating),\n      state: TypeConvert.state(log.state),\n      review: TypeConvert.time(log.review),\n    } satisfies ReviewLog\n  }\n}\n", "import { Card, DateInput, FSRSParameters, State } from './models'\nimport { TypeConvert } from './convert'\n\nexport const default_request_retention = 0.9\nexport const default_maximum_interval = 36500\nexport const default_w = [\n  0.4072, 1.1829, 3.1262, 15.4722, 7.2102, 0.5316, 1.0651, 0.0234, 1.616,\n  0.1544, 1.0824, 1.9813, 0.0953, 0.2975, 2.2042, 0.2407, 2.9466, 0.5034,\n  0.6567,\n]\nexport const default_enable_fuzz = false\nexport const default_enable_short_term = true\n\nexport const FSRSVersion: string = 'v4.4.3 using FSRS V5.0'\n\nexport const generatorParameters = (\n  props?: Partial<FSRSParameters>\n): FSRSParameters => {\n  let w = default_w\n  if (props?.w) {\n    if (props.w.length === 19) {\n      w = props?.w\n    } else if (props.w.length === 17) {\n      w = props?.w.concat([0.0, 0.0])\n      w[4] = +(w[5] * 2.0 + w[4]).toFixed(8)\n      w[5] = +(Math.log(w[5] * 3.0 + 1.0) / 3.0).toFixed(8)\n      console.debug('[FSRS V5]auto fill w to 19 length')\n    }\n  }\n  return {\n    request_retention: props?.request_retention || default_request_retention,\n    maximum_interval: props?.maximum_interval || default_maximum_interval,\n    w: w,\n    enable_fuzz: props?.enable_fuzz ?? default_enable_fuzz,\n    enable_short_term: props?.enable_short_term ?? default_enable_short_term,\n  } satisfies FSRSParameters\n}\n\n/**\n * Create an empty card\n * @param now Current time\n * @param afterHandler Convert the result to another type. (Optional)\n * @example\n * ```\n * const card: Card = createEmptyCard(new Date());\n * ```\n * @example\n * ```\n * interface CardUnChecked\n *   extends Omit<Card, \"due\" | \"last_review\" | \"state\"> {\n *   cid: string;\n *   due: Date | number;\n *   last_review: Date | null | number;\n *   state: StateType;\n * }\n *\n * function cardAfterHandler(card: Card) {\n *      return {\n *       ...card,\n *       cid: \"test001\",\n *       state: State[card.state],\n *       last_review: card.last_review ?? null,\n *     } as CardUnChecked;\n * }\n *\n * const card: CardUnChecked = createEmptyCard(new Date(), cardAfterHandler);\n * ```\n */\nexport function createEmptyCard<R = Card>(\n  now?: DateInput,\n  afterHandler?: (card: Card) => R\n): R {\n  const emptyCard: Card = {\n    due: now ? TypeConvert.time(now) : new Date(),\n    stability: 0,\n    difficulty: 0,\n    elapsed_days: 0,\n    scheduled_days: 0,\n    reps: 0,\n    lapses: 0,\n    state: State.New,\n    last_review: undefined,\n  }\n  if (afterHandler && typeof afterHandler === 'function') {\n    return afterHandler(emptyCard)\n  } else {\n    return emptyCard as R\n  }\n}\n", "import type { int, unit } from './types'\nimport type { DateInput, Grade } from './models'\nimport { Rating, State } from './models'\nimport { TypeConvert } from './convert'\n\ndeclare global {\n  export interface Date {\n    scheduler(t: int, isDay?: boolean): Date\n\n    diff(pre: Date, unit: unit): int\n\n    format(): string\n\n    dueFormat(last_review: Date, unit?: boolean, timeUnit?: string[]): string\n  }\n}\n\nDate.prototype.scheduler = function (t: int, isDay?: boolean): Date {\n  return date_scheduler(this, t, isDay)\n}\n\n/**\n * 当前时间与之前的时间差值\n * @param pre 比当前时间还要之前\n * @param unit 单位: days | minutes\n */\nDate.prototype.diff = function (pre: Date, unit: unit): int {\n  return date_diff(this, pre, unit) as int\n}\n\nDate.prototype.format = function (): string {\n  return formatDate(this)\n}\n\nDate.prototype.dueFormat = function (\n  last_review: Date,\n  unit?: boolean,\n  timeUnit?: string[]\n) {\n  return show_diff_message(this, last_review, unit, timeUnit)\n}\n\n/**\n * 计算日期和时间的偏移，并返回一个新的日期对象。\n * @param now 当前日期和时间\n * @param t 时间偏移量，当 isDay 为 true 时表示天数，为 false 时表示分钟\n * @param isDay （可选）是否按天数单位进行偏移，默认为 false，表示按分钟单位计算偏移\n * @returns 偏移后的日期和时间对象\n */\nexport function date_scheduler(\n  now: DateInput,\n  t: number,\n  isDay?: boolean\n): Date {\n  return new Date(\n    isDay\n      ? fixDate(now).getTime() + t * 24 * 60 * 60 * 1000\n      : fixDate(now).getTime() + t * 60 * 1000\n  )\n}\n\nexport function date_diff(now: DateInput, pre: DateInput, unit: unit): number {\n  if (!now || !pre) {\n    throw new Error('Invalid date')\n  }\n  const diff = fixDate(now).getTime() - fixDate(pre).getTime()\n  let r = 0\n  switch (unit) {\n    case 'days':\n      r = Math.floor(diff / (24 * 60 * 60 * 1000))\n      break\n    case 'minutes':\n      r = Math.floor(diff / (60 * 1000))\n      break\n  }\n  return r\n}\n\nexport function formatDate(dateInput: DateInput): string {\n  const date = fixDate(dateInput)\n  const year: number = date.getFullYear()\n  const month: number = date.getMonth() + 1\n  const day: number = date.getDate()\n  const hours: number = date.getHours()\n  const minutes: number = date.getMinutes()\n  const seconds: number = date.getSeconds()\n\n  return `${year}-${padZero(month)}-${padZero(day)} ${padZero(hours)}:${padZero(\n    minutes\n  )}:${padZero(seconds)}`\n}\n\nfunction padZero(num: number): string {\n  return num < 10 ? `0${num}` : `${num}`\n}\n\nconst TIMEUNIT = [60, 60, 24, 31, 12]\nconst TIMEUNITFORMAT = ['second', 'min', 'hour', 'day', 'month', 'year']\n\nexport function show_diff_message(\n  due: DateInput,\n  last_review: DateInput,\n  unit?: boolean,\n  timeUnit: string[] = TIMEUNITFORMAT\n): string {\n  due = fixDate(due)\n  last_review = fixDate(last_review)\n  if (timeUnit.length !== TIMEUNITFORMAT.length) {\n    timeUnit = TIMEUNITFORMAT\n  }\n  let diff = due.getTime() - last_review.getTime()\n  let i\n  diff /= 1000\n  for (i = 0; i < TIMEUNIT.length; i++) {\n    if (diff < TIMEUNIT[i]) {\n      break\n    } else {\n      diff /= TIMEUNIT[i]\n    }\n  }\n  return `${Math.floor(diff)}${unit ? timeUnit[i] : ''}`\n}\n\n/**\n *\n * @deprecated Use TypeConvert.time instead\n */\nexport function fixDate(value: unknown) {\n  return TypeConvert.time(value)\n}\n\n/**\n * @deprecated Use TypeConvert.state instead\n */\nexport function fixState(value: unknown): State {\n  return TypeConvert.state(value)\n}\n\n/**\n * @deprecated Use TypeConvert.rating instead\n */\nexport function fixRating(value: unknown): Rating {\n  return TypeConvert.rating(value)\n}\n\nexport const Grades: Readonly<Grade[]> = [\n  Rating.Again,\n  Rating.Hard,\n  Rating.Good,\n  Rating.Easy,\n] as const\n\nconst FUZZ_RANGES = [\n  {\n    start: 2.5,\n    end: 7.0,\n    factor: 0.15,\n  },\n  {\n    start: 7.0,\n    end: 20.0,\n    factor: 0.1,\n  },\n  {\n    start: 20.0,\n    end: Infinity,\n    factor: 0.05,\n  },\n] as const\n\nexport function get_fuzz_range(\n  interval: number,\n  elapsed_days: number,\n  maximum_interval: number\n) {\n  let delta = 1.0\n  for (const range of FUZZ_RANGES) {\n    delta +=\n      range.factor * Math.max(Math.min(interval, range.end) - range.start, 0.0)\n  }\n  interval = Math.min(interval, maximum_interval)\n  let min_ivl = Math.max(2, Math.round(interval - delta))\n  const max_ivl = Math.min(Math.round(interval + delta), maximum_interval)\n  if (interval > elapsed_days) {\n    min_ivl = Math.max(min_ivl, elapsed_days + 1)\n  }\n  min_ivl = Math.min(min_ivl, max_ivl)\n  return { min_ivl, max_ivl }\n}\n\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(value, min), max)\n}\n", "// https://github.com/davidbau/seedrandom/blob/released/lib/alea.js\n// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\ntype State = {\n  c: number\n  s0: number\n  s1: number\n  s2: number\n}\n\nclass Alea {\n  private c: number\n  private s0: number\n  private s1: number\n  private s2: number\n\n  constructor(seed?: number | string) {\n    const mash = Mash()\n    this.c = 1\n    this.s0 = mash(' ')\n    this.s1 = mash(' ')\n    this.s2 = mash(' ')\n    if (seed == null) seed = +new Date()\n    this.s0 -= mash(seed)\n    if (this.s0 < 0) this.s0 += 1\n    this.s1 -= mash(seed)\n    if (this.s1 < 0) this.s1 += 1\n    this.s2 -= mash(seed)\n    if (this.s2 < 0) this.s2 += 1\n  }\n\n  next(): number {\n    const t = 2091639 * this.s0 + this.c * 2.3283064365386963e-10 // 2^-32\n    this.s0 = this.s1\n    this.s1 = this.s2\n    this.s2 = t - (this.c = t | 0)\n    return this.s2\n  }\n\n  set state(state: State) {\n    this.c = state.c\n    this.s0 = state.s0\n    this.s1 = state.s1\n    this.s2 = state.s2\n  }\n\n  get state(): State {\n    return {\n      c: this.c,\n      s0: this.s0,\n      s1: this.s1,\n      s2: this.s2,\n    }\n  }\n}\n\nfunction Mash() {\n  let n = 0xefc8249d\n  return function mash(data: string | number): number {\n    data = String(data)\n    for (let i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i)\n      let h = 0.02519603282416938 * n\n      n = h >>> 0\n      h -= n\n      h *= n\n      n = h >>> 0\n      h -= n\n      n += h * 0x100000000 // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10 // 2^-32\n  }\n}\n\nfunction alea(seed?: number | string) {\n  const xg = new Alea(seed)\n  const prng = () => xg.next()\n\n  prng.int32 = () => (xg.next() * 0x100000000) | 0\n  prng.double = () =>\n    prng() + ((prng() * 0x200000) | 0) * 1.1102230246251565e-16 // 2^-53\n  prng.state = () => xg.state\n  prng.importState = (state: State) => {\n    xg.state = state\n    return prng\n  }\n  return prng\n}\n\nexport { alea }\n", "import { generatorParameters } from './default'\nimport { FSRSParameters, Grade, Rating } from './models'\nimport type { int } from './types'\nimport { clamp, get_fuzz_range } from './help'\nimport { alea } from './alea'\n\n/**\n * @default DECAY = -0.5\n */\nexport const DECAY: number = -0.5\n/**\n * FACTOR = Math.pow(0.9, 1 / DECAY) - 1= 19 / 81\n *\n * $$\\text{FACTOR} = \\frac{19}{81}$$\n * @default FACTOR = 19 / 81\n */\nexport const FACTOR: number = 19 / 81\n\n/**\n * @see https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#fsrs-45\n */\nexport class FSRSAlgorithm {\n  protected param!: FSRSParameters\n  protected intervalModifier!: number\n  protected _seed?: string\n\n  constructor(params: Partial<FSRSParameters>) {\n    this.param = new Proxy(\n      generatorParameters(params),\n      this.params_handler_proxy()\n    )\n    this.intervalModifier = this.calculate_interval_modifier(\n      this.param.request_retention\n    )\n  }\n\n  get interval_modifier(): number {\n    return this.intervalModifier\n  }\n\n  set seed(seed: string) {\n    this._seed = seed\n  }\n\n  /**\n   * @see https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#fsrs-45\n   *\n   * The formula used is: $$I(r,s) = (r^{\\frac{1}{DECAY}} - 1) / FACTOR \\times s$$\n   * @param request_retention 0<request_retention<=1,Requested retention rate\n   * @throws {Error} Requested retention rate should be in the range (0,1]\n   */\n  calculate_interval_modifier(request_retention: number): number {\n    if (request_retention <= 0 || request_retention > 1) {\n      throw new Error('Requested retention rate should be in the range (0,1]')\n    }\n    return +((Math.pow(request_retention, 1 / DECAY) - 1) / FACTOR).toFixed(8)\n  }\n\n  /**\n   * Get the parameters of the algorithm.\n   */\n  get parameters(): FSRSParameters {\n    return this.param\n  }\n\n  /**\n   * Set the parameters of the algorithm.\n   * @param params Partial<FSRSParameters>\n   */\n  set parameters(params: Partial<FSRSParameters>) {\n    this.update_parameters(params)\n  }\n\n  protected params_handler_proxy(): ProxyHandler<FSRSParameters> {\n    const _this = this satisfies FSRSAlgorithm\n    return {\n      set: function (\n        target: FSRSParameters,\n        prop: keyof FSRSParameters,\n        value: FSRSParameters[keyof FSRSParameters]\n      ) {\n        if (prop === 'request_retention' && Number.isFinite(value)) {\n          _this.intervalModifier = _this.calculate_interval_modifier(\n            Number(value)\n          )\n        }\n        Reflect.set(target, prop, value)\n        return true\n      },\n    }\n  }\n\n  private update_parameters(params: Partial<FSRSParameters>): void {\n    const _params = generatorParameters(params)\n    for (const key in _params) {\n      if (key in this.param) {\n        const paramKey = key as keyof FSRSParameters\n        this.param[paramKey] = _params[paramKey] as never\n      }\n    }\n  }\n\n  /**\n   * The formula used is :\n   * $$ S_0(G) = w_{G-1}$$\n   * $$S_0 = \\max \\lbrace S_0,0.1\\rbrace $$\n\n   * @param g Grade (rating at Anki) [1.again,2.hard,3.good,4.easy]\n   * @return Stability (interval when R=90%)\n   */\n  init_stability(g: Grade): number {\n    return Math.max(this.param.w[g - 1], 0.1)\n  }\n\n  /**\n   * The formula used is :\n   * $$D_0(G) = w_4 - e^{(G-1) \\cdot w_5} + 1 $$\n   * $$D_0 = \\min \\lbrace \\max \\lbrace D_0(G),1 \\rbrace,10 \\rbrace$$\n   * where the $$D_0(1)=w_4$$ when the first rating is good.\n   *\n   * @param {Grade} g Grade (rating at Anki) [1.again,2.hard,3.good,4.easy]\n   * @return {number} Difficulty $$D \\in [1,10]$$\n   */\n  init_difficulty(g: Grade): number {\n    return this.constrain_difficulty(\n      this.param.w[4] - Math.exp((g - 1) * this.param.w[5]) + 1\n    )\n  }\n\n  /**\n   * If fuzzing is disabled or ivl is less than 2.5, it returns the original interval.\n   * @param {number} ivl - The interval to be fuzzed.\n   * @param {number} elapsed_days t days since the last review\n   * @param {number} enable_fuzz - This adds a small random delay to the new interval time to prevent cards from sticking together and always being reviewed on the same day.\n   * @return {number} - The fuzzed interval.\n   **/\n  apply_fuzz(ivl: number, elapsed_days: number): int {\n    if (!this.param.enable_fuzz || ivl < 2.5) return Math.round(ivl) as int\n    const generator = alea(this._seed) // I do not want others to directly access the seed externally.\n    const fuzz_factor = generator()\n    const { min_ivl, max_ivl } = get_fuzz_range(\n      ivl,\n      elapsed_days,\n      this.param.maximum_interval\n    )\n    return Math.floor(fuzz_factor * (max_ivl - min_ivl + 1) + min_ivl) as int\n  }\n\n  /**\n   *   @see The formula used is : {@link FSRSAlgorithm.calculate_interval_modifier}\n   *   @param {number} s - Stability (interval when R=90%)\n   *   @param {number} elapsed_days t days since the last review\n   */\n  next_interval(s: number, elapsed_days: number): int {\n    const newInterval = Math.min(\n      Math.max(1, Math.round(s * this.intervalModifier)),\n      this.param.maximum_interval\n    ) as int\n    return this.apply_fuzz(newInterval, elapsed_days)\n  }\n\n  /**\n   * The formula used is :\n   * $$\\text{next}_d = D - w_6 \\cdot (g - 3)$$\n   * $$D^\\prime(D,R) = w_7 \\cdot D_0(4) +(1 - w_7) \\cdot \\text{next}_d$$\n   * @param {number} d Difficulty $$D \\in [1,10]$$\n   * @param {Grade} g Grade (rating at Anki) [1.again,2.hard,3.good,4.easy]\n   * @return {number} $$\\text{next}_D$$\n   */\n  next_difficulty(d: number, g: Grade): number {\n    const next_d = d - this.param.w[6] * (g - 3)\n    return this.constrain_difficulty(\n      this.mean_reversion(this.init_difficulty(Rating.Easy), next_d)\n    )\n  }\n\n  /**\n   * The formula used is :\n   * $$\\min \\lbrace \\max \\lbrace D_0,1 \\rbrace,10\\rbrace$$\n   * @param {number} difficulty $$D \\in [1,10]$$\n   */\n  constrain_difficulty(difficulty: number): number {\n    return Math.min(Math.max(+difficulty.toFixed(8), 1), 10)\n  }\n\n  /**\n   * The formula used is :\n   * $$w_7 \\cdot \\text{init} +(1 - w_7) \\cdot \\text{current}$$\n   * @param {number} init $$w_2 : D_0(3) = w_2 + (R-2) \\cdot w_3= w_2$$\n   * @param {number} current $$D - w_6 \\cdot (R - 2)$$\n   * @return {number} difficulty\n   */\n  mean_reversion(init: number, current: number): number {\n    return +(this.param.w[7] * init + (1 - this.param.w[7]) * current).toFixed(\n      8\n    )\n  }\n\n  /**\n   * The formula used is :\n   * $$S^\\prime_r(D,S,R,G) = S\\cdot(e^{w_8}\\cdot (11-D)\\cdot S^{-w_9}\\cdot(e^{w_{10}\\cdot(1-R)}-1)\\cdot w_{15}(\\text{if} G=2) \\cdot w_{16}(\\text{if} G=4)+1)$$\n   * @param {number} d Difficulty D \\in [1,10]\n   * @param {number} s Stability (interval when R=90%)\n   * @param {number} r Retrievability (probability of recall)\n   * @param {Grade} g Grade (Rating[0.again,1.hard,2.good,3.easy])\n   * @return {number} S^\\prime_r new stability after recall\n   */\n  next_recall_stability(d: number, s: number, r: number, g: Grade): number {\n    const hard_penalty = Rating.Hard === g ? this.param.w[15] : 1\n    const easy_bound = Rating.Easy === g ? this.param.w[16] : 1\n    return +clamp(\n      s *\n        (1 +\n          Math.exp(this.param.w[8]) *\n            (11 - d) *\n            Math.pow(s, -this.param.w[9]) *\n            (Math.exp((1 - r) * this.param.w[10]) - 1) *\n            hard_penalty *\n            easy_bound),\n      0.01,\n      36500.0\n    ).toFixed(8)\n  }\n\n  /**\n   * The formula used is :\n   * $$S^\\prime_f(D,S,R) = w_{11}\\cdot D^{-w_{12}}\\cdot ((S+1)^{w_{13}}-1) \\cdot e^{w_{14}\\cdot(1-R)}$$\n   * @param {number} d Difficulty D \\in [1,10]\n   * @param {number} s Stability (interval when R=90%)\n   * @param {number} r Retrievability (probability of recall)\n   * @return {number} S^\\prime_f new stability after forgetting\n   */\n  next_forget_stability(d: number, s: number, r: number): number {\n    return +clamp(\n      this.param.w[11] *\n        Math.pow(d, -this.param.w[12]) *\n        (Math.pow(s + 1, this.param.w[13]) - 1) *\n        Math.exp((1 - r) * this.param.w[14]),\n      0.01,\n      36500.0\n    ).toFixed(8)\n  }\n\n  /**\n   * The formula used is :\n   * $$S^\\prime_s(S,G) = S \\cdot e^{w_{17} \\cdot (G-3+w_{18})}$$\n   * @param {number} s Stability (interval when R=90%)\n   * @param {Grade} g Grade (Rating[0.again,1.hard,2.good,3.easy])\n   */\n  next_short_term_stability(s: number, g: Grade): number {\n    return +clamp(\n      s * Math.exp(this.param.w[17] * (g - 3 + this.param.w[18])),\n      0.01,\n      36500.0\n    ).toFixed(8)\n  }\n\n  /**\n   * The formula used is :\n   * $$R(t,S) = (1 + \\text{FACTOR} \\times \\frac{t}{9 \\cdot S})^{\\text{DECAY}}$$\n   * @param {number} elapsed_days t days since the last review\n   * @param {number} stability Stability (interval when R=90%)\n   * @return {number} r Retrievability (probability of recall)\n   */\n  forgetting_curve(elapsed_days: number, stability: number): number {\n    return +Math.pow(1 + (FACTOR * elapsed_days) / stability, DECAY).toFixed(8)\n  }\n}\n", "import { FSRSAlgorithm } from './algorithm'\nimport { TypeConvert } from './convert'\nimport { Grades } from './help'\nimport {\n  type Card,\n  type Grade,\n  type RecordLogItem,\n  State,\n  Rating,\n  type ReviewLog,\n  type CardInput,\n  type DateInput,\n} from './models'\nimport type { IPreview, IScheduler } from './types'\n\nexport abstract class AbstractScheduler implements IScheduler {\n  protected last: Card\n  protected current: Card\n  protected review_time: Date\n  protected next: Map<Grade, RecordLogItem> = new Map()\n  protected algorithm: FSRSAlgorithm\n\n  constructor(\n    card: CardInput | Card,\n    now: DateInput,\n    algorithm: FSRSAlgorithm\n  ) {\n    this.algorithm = algorithm\n\n    this.last = TypeConvert.card(card)\n    this.current = TypeConvert.card(card)\n    this.review_time = TypeConvert.time(now)\n    this.init()\n  }\n\n  private init() {\n    const { state, last_review } = this.current\n    let interval = 0 // card.state === State.New => 0\n    if (state !== State.New && last_review) {\n      interval = this.review_time.diff(last_review as Date, 'days')\n    }\n    this.current.last_review = this.review_time\n    this.current.elapsed_days = interval\n    this.current.reps += 1\n    this.initSeed()\n  }\n\n  public preview(): IPreview {\n    return {\n      [Rating.Again]: this.review(Rating.Again),\n      [Rating.Hard]: this.review(Rating.Hard),\n      [Rating.Good]: this.review(Rating.Good),\n      [Rating.Easy]: this.review(Rating.Easy),\n      [Symbol.iterator]: this.previewIterator.bind(this),\n    } satisfies IPreview\n  }\n\n  private *previewIterator(): IterableIterator<RecordLogItem> {\n    for (const grade of Grades) {\n      yield this.review(grade)\n    }\n  }\n\n  public review(grade: Grade): RecordLogItem {\n    const { state } = this.last\n    let item: RecordLogItem | undefined\n    switch (state) {\n      case State.New:\n        item = this.newState(grade)\n        break\n      case State.Learning:\n      case State.Relearning:\n        item = this.learningState(grade)\n        break\n      case State.Review:\n        item = this.reviewState(grade)\n        break\n    }\n    if (item) {\n      return item\n    }\n    throw new Error('Invalid grade')\n  }\n\n  protected abstract newState(grade: Grade): RecordLogItem\n\n  protected abstract learningState(grade: Grade): RecordLogItem\n\n  protected abstract reviewState(grade: Grade): RecordLogItem\n\n  private initSeed() {\n    const time = this.review_time.getTime()\n    const reps = this.current.reps\n    const mul = this.current.difficulty * this.current.stability\n    this.algorithm.seed = `${time}_${reps}_${mul}`\n  }\n\n  protected buildLog(rating: Grade): ReviewLog {\n    const { last_review, due, elapsed_days } = this.last\n\n    return {\n      rating: rating,\n      state: this.current.state,\n      due: last_review || due,\n      stability: this.current.stability,\n      difficulty: this.current.difficulty,\n      elapsed_days: this.current.elapsed_days,\n      last_elapsed_days: elapsed_days,\n      scheduled_days: this.current.scheduled_days,\n      review: this.review_time,\n    } satisfies ReviewLog\n  }\n}\n", "import { AbstractScheduler } from '../abstract_scheduler'\nimport { TypeConvert } from '../convert'\nimport {\n  type Card,\n  type Grade,\n  Rating,\n  type RecordLogItem,\n  State,\n} from '../models'\nimport type { int } from '../types'\n\nexport default class BasicScheduler extends AbstractScheduler {\n  protected override newState(grade: Grade): RecordLogItem {\n    const exist = this.next.get(grade)\n    if (exist) {\n      return exist\n    }\n    const next = TypeConvert.card(this.current)\n    next.difficulty = this.algorithm.init_difficulty(grade)\n    next.stability = this.algorithm.init_stability(grade)\n\n    switch (grade) {\n      case Rating.Again:\n        next.scheduled_days = 0\n        next.due = this.review_time.scheduler(1 as int)\n        next.state = State.Learning\n        break\n      case Rating.Hard:\n        next.scheduled_days = 0\n        next.due = this.review_time.scheduler(5 as int)\n        next.state = State.Learning\n        break\n      case Rating.Good:\n        next.scheduled_days = 0\n        next.due = this.review_time.scheduler(10 as int)\n        next.state = State.Learning\n        break\n      case Rating.Easy: {\n        const easy_interval = this.algorithm.next_interval(\n          next.stability,\n          this.current.elapsed_days\n        )\n        next.scheduled_days = easy_interval\n        next.due = this.review_time.scheduler(easy_interval as int, true)\n        next.state = State.Review\n        break\n      }\n      default:\n        throw new Error('Invalid grade')\n    }\n    const item = {\n      card: next,\n      log: this.buildLog(grade),\n    } satisfies RecordLogItem\n    this.next.set(grade, item)\n    return item\n  }\n\n  protected override learningState(grade: Grade): RecordLogItem {\n    const exist = this.next.get(grade)\n    if (exist) {\n      return exist\n    }\n    const { state, difficulty, stability } = this.last\n    const next = TypeConvert.card(this.current)\n    const interval = this.current.elapsed_days\n    next.difficulty = this.algorithm.next_difficulty(difficulty, grade)\n    next.stability = this.algorithm.next_short_term_stability(stability, grade)\n\n    switch (grade) {\n      case Rating.Again: {\n        next.scheduled_days = 0\n        next.due = this.review_time.scheduler(5 as int, false)\n        next.state = state\n        break\n      }\n      case Rating.Hard: {\n        next.scheduled_days = 0\n        next.due = this.review_time.scheduler(10 as int)\n        next.state = state\n        break\n      }\n      case Rating.Good: {\n        const good_interval = this.algorithm.next_interval(\n          next.stability,\n          interval\n        )\n        next.scheduled_days = good_interval\n        next.due = this.review_time.scheduler(good_interval as int, true)\n        next.state = State.Review\n        break\n      }\n      case Rating.Easy: {\n        const good_stability = this.algorithm.next_short_term_stability(\n          stability,\n          Rating.Good\n        )\n        const good_interval = this.algorithm.next_interval(\n          good_stability,\n          interval\n        )\n        const easy_interval = Math.max(\n          this.algorithm.next_interval(next.stability, interval),\n          good_interval + 1\n        ) as int\n        next.scheduled_days = easy_interval\n        next.due = this.review_time.scheduler(easy_interval as int, true)\n        next.state = State.Review\n        break\n      }\n      default:\n        throw new Error('Invalid grade')\n    }\n    const item = {\n      card: next,\n      log: this.buildLog(grade),\n    } satisfies RecordLogItem\n    this.next.set(grade, item)\n    return item\n  }\n\n  protected override reviewState(grade: Grade): RecordLogItem {\n    const exist = this.next.get(grade)\n    if (exist) {\n      return exist\n    }\n    const interval = this.current.elapsed_days\n    const { difficulty, stability } = this.last\n    const retrievability = this.algorithm.forgetting_curve(interval, stability)\n    const next_again = TypeConvert.card(this.current)\n    const next_hard = TypeConvert.card(this.current)\n    const next_good = TypeConvert.card(this.current)\n    const next_easy = TypeConvert.card(this.current)\n\n    this.next_ds(\n      next_again,\n      next_hard,\n      next_good,\n      next_easy,\n      difficulty,\n      stability,\n      retrievability\n    )\n\n    this.next_interval(next_again, next_hard, next_good, next_easy, interval)\n    this.next_state(next_again, next_hard, next_good, next_easy)\n    next_again.lapses += 1\n\n    const item_again = {\n      card: next_again,\n      log: this.buildLog(Rating.Again),\n    } satisfies RecordLogItem\n    const item_hard = {\n      card: next_hard,\n      log: super.buildLog(Rating.Hard),\n    } satisfies RecordLogItem\n    const item_good = {\n      card: next_good,\n      log: super.buildLog(Rating.Good),\n    } satisfies RecordLogItem\n    const item_easy = {\n      card: next_easy,\n      log: super.buildLog(Rating.Easy),\n    } satisfies RecordLogItem\n\n    this.next.set(Rating.Again, item_again)\n    this.next.set(Rating.Hard, item_hard)\n    this.next.set(Rating.Good, item_good)\n    this.next.set(Rating.Easy, item_easy)\n    return this.next.get(grade)!\n  }\n\n  /**\n   * Review next_ds\n   */\n  private next_ds(\n    next_again: Card,\n    next_hard: Card,\n    next_good: Card,\n    next_easy: Card,\n    difficulty: number,\n    stability: number,\n    retrievability: number\n  ): void {\n    next_again.difficulty = this.algorithm.next_difficulty(\n      difficulty,\n      Rating.Again\n    )\n    next_again.stability = this.algorithm.next_forget_stability(\n      difficulty,\n      stability,\n      retrievability\n    )\n    next_hard.difficulty = this.algorithm.next_difficulty(\n      difficulty,\n      Rating.Hard\n    )\n    next_hard.stability = this.algorithm.next_recall_stability(\n      difficulty,\n      stability,\n      retrievability,\n      Rating.Hard\n    )\n    next_good.difficulty = this.algorithm.next_difficulty(\n      difficulty,\n      Rating.Good\n    )\n    next_good.stability = this.algorithm.next_recall_stability(\n      difficulty,\n      stability,\n      retrievability,\n      Rating.Good\n    )\n    next_easy.difficulty = this.algorithm.next_difficulty(\n      difficulty,\n      Rating.Easy\n    )\n    next_easy.stability = this.algorithm.next_recall_stability(\n      difficulty,\n      stability,\n      retrievability,\n      Rating.Easy\n    )\n  }\n\n  /**\n   * Review next_interval\n   */\n  private next_interval(\n    next_again: Card,\n    next_hard: Card,\n    next_good: Card,\n    next_easy: Card,\n    interval: number\n  ): void {\n    let hard_interval: int, good_interval: int\n    hard_interval = this.algorithm.next_interval(next_hard.stability, interval)\n    good_interval = this.algorithm.next_interval(next_good.stability, interval)\n    hard_interval = Math.min(hard_interval, good_interval) as int\n    good_interval = Math.max(good_interval, hard_interval + 1) as int\n    const easy_interval = Math.max(\n      this.algorithm.next_interval(next_easy.stability, interval),\n      good_interval + 1\n    ) as int\n    next_again.scheduled_days = 0\n    next_again.due = this.review_time.scheduler(5 as int)\n\n    next_hard.scheduled_days = hard_interval\n    next_hard.due = this.review_time.scheduler(hard_interval, true)\n    next_good.scheduled_days = good_interval\n    next_good.due = this.review_time.scheduler(good_interval, true)\n\n    next_easy.scheduled_days = easy_interval\n    next_easy.due = this.review_time.scheduler(easy_interval, true)\n  }\n\n  /**\n   * Review next_state\n   */\n  private next_state(\n    next_again: Card,\n    next_hard: Card,\n    next_good: Card,\n    next_easy: Card\n  ) {\n    next_again.state = State.Relearning\n    // next_again.lapses += 1\n\n    next_hard.state = State.Review\n\n    next_good.state = State.Review\n\n    next_easy.state = State.Review\n  }\n}\n", "import { AbstractScheduler } from '../abstract_scheduler'\nimport { TypeConvert } from '../convert'\nimport {\n  type Card,\n  type Grade,\n  Rating,\n  type RecordLogItem,\n  State,\n} from '../models'\nimport type { int } from '../types'\n\nexport default class LongTermScheduler extends AbstractScheduler {\n  protected override newState(grade: Grade): RecordLogItem {\n    const exist = this.next.get(grade)\n    if (exist) {\n      return exist\n    }\n\n    this.current.scheduled_days = 0\n    this.current.elapsed_days = 0\n\n    const next_again = TypeConvert.card(this.current)\n    const next_hard = TypeConvert.card(this.current)\n    const next_good = TypeConvert.card(this.current)\n    const next_easy = TypeConvert.card(this.current)\n\n    this.init_ds(next_again, next_hard, next_good, next_easy)\n    const first_interval = 0\n\n    this.next_interval(\n      next_again,\n      next_hard,\n      next_good,\n      next_easy,\n      first_interval\n    )\n\n    this.next_state(next_again, next_hard, next_good, next_easy)\n    this.update_next(next_again, next_hard, next_good, next_easy)\n    return this.next.get(grade)!\n  }\n\n  private init_ds(\n    next_again: Card,\n    next_hard: Card,\n    next_good: Card,\n    next_easy: Card\n  ): void {\n    next_again.difficulty = this.algorithm.init_difficulty(Rating.Again)\n    next_again.stability = this.algorithm.init_stability(Rating.Again)\n\n    next_hard.difficulty = this.algorithm.init_difficulty(Rating.Hard)\n    next_hard.stability = this.algorithm.init_stability(Rating.Hard)\n\n    next_good.difficulty = this.algorithm.init_difficulty(Rating.Good)\n    next_good.stability = this.algorithm.init_stability(Rating.Good)\n\n    next_easy.difficulty = this.algorithm.init_difficulty(Rating.Easy)\n    next_easy.stability = this.algorithm.init_stability(Rating.Easy)\n  }\n\n  /**\n   * @see https://github.com/open-spaced-repetition/ts-fsrs/issues/98#issuecomment-2241923194\n   */\n  protected override learningState(grade: Grade): RecordLogItem {\n    return this.reviewState(grade)\n  }\n  protected override reviewState(grade: Grade): RecordLogItem {\n    const exist = this.next.get(grade)\n    if (exist) {\n      return exist\n    }\n    const interval = this.current.elapsed_days\n    const { difficulty, stability } = this.last\n    const retrievability = this.algorithm.forgetting_curve(interval, stability)\n    const next_again = TypeConvert.card(this.current)\n    const next_hard = TypeConvert.card(this.current)\n    const next_good = TypeConvert.card(this.current)\n    const next_easy = TypeConvert.card(this.current)\n\n    this.next_ds(\n      next_again,\n      next_hard,\n      next_good,\n      next_easy,\n      difficulty,\n      stability,\n      retrievability\n    )\n\n    this.next_interval(next_again, next_hard, next_good, next_easy, interval)\n    this.next_state(next_again, next_hard, next_good, next_easy)\n    next_again.lapses += 1\n\n    this.update_next(next_again, next_hard, next_good, next_easy)\n    return this.next.get(grade)!\n  }\n\n  /**\n   * Review next_ds\n   */\n  private next_ds(\n    next_again: Card,\n    next_hard: Card,\n    next_good: Card,\n    next_easy: Card,\n    difficulty: number,\n    stability: number,\n    retrievability: number\n  ): void {\n    next_again.difficulty = this.algorithm.next_difficulty(\n      difficulty,\n      Rating.Again\n    )\n    next_again.stability = this.algorithm.next_forget_stability(\n      difficulty,\n      stability,\n      retrievability\n    )\n    next_hard.difficulty = this.algorithm.next_difficulty(\n      difficulty,\n      Rating.Hard\n    )\n    next_hard.stability = this.algorithm.next_recall_stability(\n      difficulty,\n      stability,\n      retrievability,\n      Rating.Hard\n    )\n    next_good.difficulty = this.algorithm.next_difficulty(\n      difficulty,\n      Rating.Good\n    )\n    next_good.stability = this.algorithm.next_recall_stability(\n      difficulty,\n      stability,\n      retrievability,\n      Rating.Good\n    )\n    next_easy.difficulty = this.algorithm.next_difficulty(\n      difficulty,\n      Rating.Easy\n    )\n    next_easy.stability = this.algorithm.next_recall_stability(\n      difficulty,\n      stability,\n      retrievability,\n      Rating.Easy\n    )\n  }\n\n  /**\n   * Review/New next_interval\n   */\n  private next_interval(\n    next_again: Card,\n    next_hard: Card,\n    next_good: Card,\n    next_easy: Card,\n    interval: number\n  ): void {\n    let again_interval: int,\n      hard_interval: int,\n      good_interval: int,\n      easy_interval: int\n    again_interval = this.algorithm.next_interval(\n      next_again.stability,\n      interval\n    )\n    hard_interval = this.algorithm.next_interval(next_hard.stability, interval)\n    good_interval = this.algorithm.next_interval(next_good.stability, interval)\n    easy_interval = this.algorithm.next_interval(next_easy.stability, interval)\n\n    again_interval = Math.min(again_interval, hard_interval) as int\n    hard_interval = Math.max(hard_interval, again_interval + 1) as int\n    good_interval = Math.max(good_interval, hard_interval + 1) as int\n    easy_interval = Math.max(easy_interval, good_interval + 1) as int\n\n    next_again.scheduled_days = again_interval\n    next_again.due = this.review_time.scheduler(again_interval, true)\n\n    next_hard.scheduled_days = hard_interval\n    next_hard.due = this.review_time.scheduler(hard_interval, true)\n\n    next_good.scheduled_days = good_interval\n    next_good.due = this.review_time.scheduler(good_interval, true)\n\n    next_easy.scheduled_days = easy_interval\n    next_easy.due = this.review_time.scheduler(easy_interval, true)\n  }\n\n  /**\n   * Review/New next_state\n   */\n  private next_state(\n    next_again: Card,\n    next_hard: Card,\n    next_good: Card,\n    next_easy: Card\n  ) {\n    next_again.state = State.Review\n    // next_again.lapses += 1\n\n    next_hard.state = State.Review\n\n    next_good.state = State.Review\n\n    next_easy.state = State.Review\n  }\n\n  private update_next(\n    next_again: Card,\n    next_hard: Card,\n    next_good: Card,\n    next_easy: Card\n  ) {\n    const item_again = {\n      card: next_again,\n      log: this.buildLog(Rating.Again),\n    } satisfies RecordLogItem\n    const item_hard = {\n      card: next_hard,\n      log: super.buildLog(Rating.Hard),\n    } satisfies RecordLogItem\n    const item_good = {\n      card: next_good,\n      log: super.buildLog(Rating.Good),\n    } satisfies RecordLogItem\n    const item_easy = {\n      card: next_easy,\n      log: super.buildLog(Rating.Easy),\n    } satisfies RecordLogItem\n\n    this.next.set(Rating.Again, item_again)\n    this.next.set(Rating.Hard, item_hard)\n    this.next.set(Rating.Good, item_good)\n    this.next.set(Rating.Easy, item_easy)\n  }\n}\n", "import { TypeConvert } from './convert'\nimport { createEmptyCard } from './default'\nimport type { FSRS } from './fsrs'\nimport {\n  type Card,\n  type CardInput,\n  DateInput,\n  type FSRSHistory,\n  type Grade,\n  Rating,\n  type RecordLogItem,\n  type ReviewLog,\n  State,\n} from './models'\n\n/**\n * The `Reschedule` class provides methods to handle the rescheduling of cards based on their review history.\n * determine the next review dates and update the card's state accordingly.\n */\nexport class Reschedule {\n  private fsrs: FSRS\n  /**\n   * Creates an instance of the `Reschedule` class.\n   * @param fsrs - An instance of the FSRS class used for scheduling.\n   */\n  constructor(fsrs: FSRS) {\n    this.fsrs = fsrs\n  }\n\n  /**\n   * Replays a review for a card and determines the next review date based on the given rating.\n   * @param card - The card being reviewed.\n   * @param reviewed - The date the card was reviewed.\n   * @param rating - The grade given to the card during the review.\n   * @returns A `RecordLogItem` containing the updated card and review log.\n   */\n  replay(card: Card, reviewed: Date, rating: Grade): RecordLogItem {\n    return this.fsrs.next(card, reviewed, rating)\n  }\n\n  /**\n   * Processes a manual review for a card, allowing for custom state, stability, difficulty, and due date.\n   * @param card - The card being reviewed.\n   * @param state - The state of the card after the review.\n   * @param reviewed - The date the card was reviewed.\n   * @param elapsed_days - The number of days since the last review.\n   * @param stability - (Optional) The stability of the card.\n   * @param difficulty - (Optional) The difficulty of the card.\n   * @param due - (Optional) The due date for the next review.\n   * @returns A `RecordLogItem` containing the updated card and review log.\n   * @throws Will throw an error if the state or due date is not provided when required.\n   */\n  handleManualRating(\n    card: Card,\n    state: State,\n    reviewed: Date,\n    elapsed_days: number,\n    stability?: number,\n    difficulty?: number,\n    due?: Date\n  ): RecordLogItem {\n    if (typeof state === 'undefined') {\n      throw new Error('reschedule: state is required for manual rating')\n    }\n    let log: ReviewLog\n    let next_card: Card\n    if (<State>state === State.New) {\n      log = {\n        rating: Rating.Manual,\n        state: state,\n        due: <Date>due ?? reviewed,\n        stability: card.stability,\n        difficulty: card.difficulty,\n        elapsed_days: elapsed_days,\n        last_elapsed_days: card.elapsed_days,\n        scheduled_days: card.scheduled_days,\n        review: <Date>reviewed,\n      } satisfies ReviewLog\n      next_card = createEmptyCard<Card>(reviewed)\n      next_card.last_review = reviewed\n    } else {\n      if (typeof due === 'undefined') {\n        throw new Error('reschedule: due is required for manual rating')\n      }\n      const scheduled_days = due.diff(reviewed as Date, 'days')\n      log = {\n        rating: Rating.Manual,\n        state: <State>card.state,\n        due: card.last_review || card.due,\n        stability: card.stability,\n        difficulty: card.difficulty,\n        elapsed_days: elapsed_days,\n        last_elapsed_days: card.elapsed_days,\n        scheduled_days: card.scheduled_days,\n        review: <Date>reviewed,\n      } satisfies ReviewLog\n      next_card = {\n        ...card,\n        state: <State>state,\n        due: <Date>due,\n        last_review: <Date>reviewed,\n        stability: stability || card.stability,\n        difficulty: difficulty || card.difficulty,\n        elapsed_days: elapsed_days,\n        scheduled_days: scheduled_days,\n        reps: card.reps + 1,\n      } satisfies Card\n    }\n\n    return { card: next_card, log }\n  }\n\n  /**\n   * Reschedules a card based on its review history.\n   *\n   * @param current_card - The card to be rescheduled.\n   * @param reviews - An array of review history objects.\n   * @returns An array of record log items representing the rescheduling process.\n   */\n  reschedule(current_card: CardInput, reviews: FSRSHistory[]) {\n    const collections: RecordLogItem[] = []\n    let cur_card = createEmptyCard<Card>(current_card.due)\n    for (const review of reviews) {\n      let item: RecordLogItem\n      review.review = TypeConvert.time(review.review)\n      if (review.rating === Rating.Manual) {\n        // ref: abstract_scheduler.ts#init\n        let interval = 0\n        if (cur_card.state !== State.New && cur_card.last_review) {\n          interval = review.review.diff(cur_card.last_review as Date, 'days')\n        }\n        item = this.handleManualRating(\n          cur_card,\n          review.state,\n          review.review,\n          interval,\n          review.stability,\n          review.difficulty,\n          review.due ? TypeConvert.time(review.due) : undefined\n        )\n      } else {\n        item = this.replay(cur_card, review.review, review.rating)\n      }\n      collections.push(item)\n      cur_card = item.card\n    }\n    return collections\n  }\n\n  calculateManualRecord(\n    current_card: CardInput,\n    now: DateInput,\n    record_log_item?: RecordLogItem,\n    update_memory?: boolean\n  ): RecordLogItem | null {\n    if (!record_log_item) {\n      return null\n    }\n    // if first_card === recordItem.card then return null\n    const { card: reschedule_card, log } = record_log_item\n    const cur_card = <Card>TypeConvert.card(current_card) // copy card\n    if (cur_card.due.getTime() === reschedule_card.due.getTime()) {\n      return null\n    }\n    cur_card.scheduled_days = reschedule_card.due.diff(\n      cur_card.due as Date,\n      'days'\n    )\n    return this.handleManualRating(\n      cur_card,\n      reschedule_card.state,\n      TypeConvert.time(now),\n      log.elapsed_days,\n      update_memory ? reschedule_card.stability : undefined,\n      update_memory ? reschedule_card.difficulty : undefined,\n      reschedule_card.due\n    )\n  }\n}\n", "import {\n  Card,\n  CardInput,\n  DateInput,\n  FSRSHistory,\n  FSRSParameters,\n  Grade,\n  Rating,\n  RecordLogItem,\n  ReviewLog,\n  ReviewLogInput,\n  State,\n} from './models'\nimport type { IPreview, IReschedule, RescheduleOptions } from './types'\nimport { FSRSAlgorithm } from './algorithm'\nimport { TypeConvert } from './convert'\nimport BasicScheduler from './impl/basic_scheduler'\nimport LongTermScheduler from './impl/long_term_scheduler'\nimport { createEmptyCard } from './default'\nimport { Reschedule } from './reschedule'\n\nexport class FSRS extends FSRSAlgorithm {\n  private Scheduler\n  constructor(param: Partial<FSRSParameters>) {\n    super(param)\n    const { enable_short_term } = this.parameters\n    this.Scheduler = enable_short_term ? BasicScheduler : LongTermScheduler\n  }\n\n  protected override params_handler_proxy(): ProxyHandler<FSRSParameters> {\n    const _this = this satisfies FSRS\n    return {\n      set: function (\n        target: FSRSParameters,\n        prop: keyof FSRSParameters,\n        value: FSRSParameters[keyof FSRSParameters]\n      ) {\n        if (prop === 'request_retention' && Number.isFinite(value)) {\n          _this.intervalModifier = _this.calculate_interval_modifier(\n            Number(value)\n          )\n        } else if (prop === 'enable_short_term') {\n          _this.Scheduler = value === true ? BasicScheduler : LongTermScheduler\n        }\n        Reflect.set(target, prop, value)\n        return true\n      },\n    }\n  }\n\n  /**\n   * Display the collection of cards and logs for the four scenarios after scheduling the card at the current time.\n   * @param card Card to be processed\n   * @param now Current time or scheduled time\n   * @param afterHandler Convert the result to another type. (Optional)\n   * @example\n   * ```\n   * const card: Card = createEmptyCard(new Date());\n   * const f = fsrs();\n   * const recordLog = f.repeat(card, new Date());\n   * ```\n   * @example\n   * ```\n   * interface RevLogUnchecked\n   *   extends Omit<ReviewLog, \"due\" | \"review\" | \"state\" | \"rating\"> {\n   *   cid: string;\n   *   due: Date | number;\n   *   state: StateType;\n   *   review: Date | number;\n   *   rating: RatingType;\n   * }\n   *\n   * interface RepeatRecordLog {\n   *   card: CardUnChecked; //see method: createEmptyCard\n   *   log: RevLogUnchecked;\n   * }\n   *\n   * function repeatAfterHandler(recordLog: RecordLog) {\n   *     const record: { [key in Grade]: RepeatRecordLog } = {} as {\n   *       [key in Grade]: RepeatRecordLog;\n   *     };\n   *     for (const grade of Grades) {\n   *       record[grade] = {\n   *         card: {\n   *           ...(recordLog[grade].card as Card & { cid: string }),\n   *           due: recordLog[grade].card.due.getTime(),\n   *           state: State[recordLog[grade].card.state] as StateType,\n   *           last_review: recordLog[grade].card.last_review\n   *             ? recordLog[grade].card.last_review!.getTime()\n   *             : null,\n   *         },\n   *         log: {\n   *           ...recordLog[grade].log,\n   *           cid: (recordLog[grade].card as Card & { cid: string }).cid,\n   *           due: recordLog[grade].log.due.getTime(),\n   *           review: recordLog[grade].log.review.getTime(),\n   *           state: State[recordLog[grade].log.state] as StateType,\n   *           rating: Rating[recordLog[grade].log.rating] as RatingType,\n   *         },\n   *       };\n   *     }\n   *     return record;\n   * }\n   * const card: Card = createEmptyCard(new Date(), cardAfterHandler); //see method:  createEmptyCard\n   * const f = fsrs();\n   * const recordLog = f.repeat(card, new Date(), repeatAfterHandler);\n   * ```\n   */\n  repeat<R = IPreview>(\n    card: CardInput | Card,\n    now: DateInput,\n    afterHandler?: (recordLog: IPreview) => R\n  ): R {\n    const Scheduler = this.Scheduler\n    const instace = new Scheduler(card, now, this satisfies FSRSAlgorithm)\n    const recordLog = instace.preview()\n    if (afterHandler && typeof afterHandler === 'function') {\n      return afterHandler(recordLog)\n    } else {\n      return recordLog as R\n    }\n  }\n\n  /**\n   * Display the collection of cards and logs for the card scheduled at the current time, after applying a specific grade rating.\n   * @param card Card to be processed\n   * @param now Current time or scheduled time\n   * @param grade Rating of the review (Again, Hard, Good, Easy)\n   * @param afterHandler Convert the result to another type. (Optional)\n   * @example\n   * ```\n   * const card: Card = createEmptyCard(new Date());\n   * const f = fsrs();\n   * const recordLogItem = f.next(card, new Date(), Rating.Again);\n   * ```\n   * @example\n   * ```\n   * interface RevLogUnchecked\n   *   extends Omit<ReviewLog, \"due\" | \"review\" | \"state\" | \"rating\"> {\n   *   cid: string;\n   *   due: Date | number;\n   *   state: StateType;\n   *   review: Date | number;\n   *   rating: RatingType;\n   * }\n   *\n   * interface NextRecordLog {\n   *   card: CardUnChecked; //see method: createEmptyCard\n   *   log: RevLogUnchecked;\n   * }\n   *\n  function nextAfterHandler(recordLogItem: RecordLogItem) {\n    const recordItem = {\n      card: {\n        ...(recordLogItem.card as Card & { cid: string }),\n        due: recordLogItem.card.due.getTime(),\n        state: State[recordLogItem.card.state] as StateType,\n        last_review: recordLogItem.card.last_review\n          ? recordLogItem.card.last_review!.getTime()\n          : null,\n      },\n      log: {\n        ...recordLogItem.log,\n        cid: (recordLogItem.card as Card & { cid: string }).cid,\n        due: recordLogItem.log.due.getTime(),\n        review: recordLogItem.log.review.getTime(),\n        state: State[recordLogItem.log.state] as StateType,\n        rating: Rating[recordLogItem.log.rating] as RatingType,\n      },\n    };\n    return recordItem\n  }\n   * const card: Card = createEmptyCard(new Date(), cardAfterHandler); //see method:  createEmptyCard\n   * const f = fsrs();\n   * const recordLogItem = f.repeat(card, new Date(), Rating.Again, nextAfterHandler);\n   * ```\n   */\n  next<R = RecordLogItem>(\n    card: CardInput | Card,\n    now: DateInput,\n    grade: Grade,\n    afterHandler?: (recordLog: RecordLogItem) => R\n  ): R {\n    const Scheduler = this.Scheduler\n    const instace = new Scheduler(card, now, this satisfies FSRSAlgorithm)\n    const g = TypeConvert.rating(grade)\n    if (g === Rating.Manual) {\n      throw new Error('Cannot review a manual rating')\n    }\n    const recordLogItem = instace.review(g)\n    if (afterHandler && typeof afterHandler === 'function') {\n      return afterHandler(recordLogItem)\n    } else {\n      return recordLogItem as R\n    }\n  }\n\n  /**\n   * Get the retrievability of the card\n   * @param card  Card to be processed\n   * @param now  Current time or scheduled time\n   * @param format  default:true , Convert the result to another type. (Optional)\n   * @returns  The retrievability of the card,if format is true, the result is a string, otherwise it is a number\n   */\n  get_retrievability<T extends boolean>(\n    card: CardInput | Card,\n    now?: DateInput,\n    format: T = true as T\n  ): T extends true ? string : number {\n    const processedCard = TypeConvert.card(card)\n    now = now ? TypeConvert.time(now) : new Date()\n    const t =\n      processedCard.state !== State.New\n        ? Math.max(now.diff(processedCard.last_review as Date, 'days'), 0)\n        : 0\n    const r =\n      processedCard.state !== State.New\n        ? this.forgetting_curve(t, +processedCard.stability.toFixed(8))\n        : 0\n    return (format ? `${(r * 100).toFixed(2)}%` : r) as T extends true\n      ? string\n      : number\n  }\n\n  /**\n   *\n   * @param card Card to be processed\n   * @param log last review log\n   * @param afterHandler Convert the result to another type. (Optional)\n   * @example\n   * ```\n   * const now = new Date();\n   * const f = fsrs();\n   * const emptyCardFormAfterHandler = createEmptyCard(now);\n   * const repeatFormAfterHandler = f.repeat(emptyCardFormAfterHandler, now);\n   * const { card, log } = repeatFormAfterHandler[Rating.Hard];\n   * const rollbackFromAfterHandler = f.rollback(card, log);\n   * ```\n   *\n   * @example\n   * ```\n   * const now = new Date();\n   * const f = fsrs();\n   * const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler);  //see method: createEmptyCard\n   * const repeatFormAfterHandler = f.repeat(emptyCardFormAfterHandler, now, repeatAfterHandler); //see method: fsrs.repeat()\n   * const { card, log } = repeatFormAfterHandler[Rating.Hard];\n   * const rollbackFromAfterHandler = f.rollback(card, log, cardAfterHandler);\n   * ```\n   */\n  rollback<R = Card>(\n    card: CardInput | Card,\n    log: ReviewLogInput,\n    afterHandler?: (prevCard: Card) => R\n  ): R {\n    const processedCard = TypeConvert.card(card)\n    const processedLog = TypeConvert.review_log(log)\n    if (processedLog.rating === Rating.Manual) {\n      throw new Error('Cannot rollback a manual rating')\n    }\n    let last_due, last_review, last_lapses\n    switch (processedLog.state) {\n      case State.New:\n        last_due = processedLog.due\n        last_review = undefined\n        last_lapses = 0\n        break\n      case State.Learning:\n      case State.Relearning:\n      case State.Review:\n        last_due = processedLog.review\n        last_review = processedLog.due\n        last_lapses =\n          processedCard.lapses -\n          (processedLog.rating === Rating.Again &&\n          processedLog.state === State.Review\n            ? 1\n            : 0)\n        break\n    }\n\n    const prevCard: Card = {\n      ...processedCard,\n      due: last_due,\n      stability: processedLog.stability,\n      difficulty: processedLog.difficulty,\n      elapsed_days: processedLog.last_elapsed_days,\n      scheduled_days: processedLog.scheduled_days,\n      reps: Math.max(0, processedCard.reps - 1),\n      lapses: Math.max(0, last_lapses),\n      state: processedLog.state,\n      last_review: last_review,\n    }\n    if (afterHandler && typeof afterHandler === 'function') {\n      return afterHandler(prevCard)\n    } else {\n      return prevCard as R\n    }\n  }\n\n  /**\n   *\n   * @param card Card to be processed\n   * @param now Current time or scheduled time\n   * @param reset_count Should the review count information(reps,lapses) be reset. (Optional)\n   * @param afterHandler Convert the result to another type. (Optional)\n   * @example\n   * ```\n   * const now = new Date();\n   * const f = fsrs();\n   * const emptyCard = createEmptyCard(now);\n   * const scheduling_cards = f.repeat(emptyCard, now);\n   * const { card, log } = scheduling_cards[Rating.Hard];\n   * const forgetCard = f.forget(card, new Date(), true);\n   * ```\n   *\n   * @example\n   * ```\n   * interface RepeatRecordLog {\n   *   card: CardUnChecked; //see method: createEmptyCard\n   *   log: RevLogUnchecked; //see method: fsrs.repeat()\n   * }\n   *\n   * function forgetAfterHandler(recordLogItem: RecordLogItem): RepeatRecordLog {\n   *     return {\n   *       card: {\n   *         ...(recordLogItem.card as Card & { cid: string }),\n   *         due: recordLogItem.card.due.getTime(),\n   *         state: State[recordLogItem.card.state] as StateType,\n   *         last_review: recordLogItem.card.last_review\n   *           ? recordLogItem.card.last_review!.getTime()\n   *           : null,\n   *       },\n   *       log: {\n   *         ...recordLogItem.log,\n   *         cid: (recordLogItem.card as Card & { cid: string }).cid,\n   *         due: recordLogItem.log.due.getTime(),\n   *         review: recordLogItem.log.review.getTime(),\n   *         state: State[recordLogItem.log.state] as StateType,\n   *         rating: Rating[recordLogItem.log.rating] as RatingType,\n   *       },\n   *     };\n   * }\n   * const now = new Date();\n   * const f = fsrs();\n   * const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler); //see method:  createEmptyCard\n   * const repeatFormAfterHandler = f.repeat(emptyCardFormAfterHandler, now, repeatAfterHandler); //see method: fsrs.repeat()\n   * const { card } = repeatFormAfterHandler[Rating.Hard];\n   * const forgetFromAfterHandler = f.forget(card, date_scheduler(now, 1, true), false, forgetAfterHandler);\n   * ```\n   */\n  forget<R = RecordLogItem>(\n    card: CardInput | Card,\n    now: DateInput,\n    reset_count: boolean = false,\n    afterHandler?: (recordLogItem: RecordLogItem) => R\n  ): R {\n    const processedCard = TypeConvert.card(card)\n    now = TypeConvert.time(now)\n    const scheduled_days =\n      processedCard.state === State.New\n        ? 0\n        : now.diff(processedCard.last_review as Date, 'days')\n    const forget_log: ReviewLog = {\n      rating: Rating.Manual,\n      state: processedCard.state,\n      due: processedCard.due,\n      stability: processedCard.stability,\n      difficulty: processedCard.difficulty,\n      elapsed_days: 0,\n      last_elapsed_days: processedCard.elapsed_days,\n      scheduled_days: scheduled_days,\n      review: now,\n    }\n    const forget_card: Card = {\n      ...processedCard,\n      due: now,\n      stability: 0,\n      difficulty: 0,\n      elapsed_days: 0,\n      scheduled_days: 0,\n      reps: reset_count ? 0 : processedCard.reps,\n      lapses: reset_count ? 0 : processedCard.lapses,\n      state: State.New,\n      last_review: processedCard.last_review,\n    }\n    const recordLogItem: RecordLogItem = { card: forget_card, log: forget_log }\n    if (afterHandler && typeof afterHandler === 'function') {\n      return afterHandler(recordLogItem)\n    } else {\n      return recordLogItem as R\n    }\n  }\n\n  /**\n   * Reschedules the current card and returns the rescheduled collections and reschedule item.\n   *\n   * @template T - The type of the record log item.\n   * @param {CardInput | Card} current_card - The current card to be rescheduled.\n   * @param {Array<FSRSHistory>} reviews - The array of FSRSHistory objects representing the reviews.\n   * @param {Partial<RescheduleOptions<T>>} options - The optional reschedule options.\n   * @returns {IReschedule<T>} - The rescheduled collections and reschedule item.\n   * \n   * @example\n   * ```\n    const f = fsrs()\n        const grades: Grade[] = [Rating.Good, Rating.Good, Rating.Good, Rating.Good]\n        const reviews_at = [\n          new Date(2024, 8, 13),\n          new Date(2024, 8, 13),\n          new Date(2024, 8, 17),\n          new Date(2024, 8, 28),\n        ]\n\n        const reviews: FSRSHistory[] = []\n        for (let i = 0; i < grades.length; i++) {\n          reviews.push({\n            rating: grades[i],\n            review: reviews_at[i],\n          })\n        }\n\n        const results_short = scheduler.reschedule(\n          createEmptyCard(),\n          reviews,\n          {\n            skipManual: false,\n          }\n        )\n        console.log(results_short)\n   * ```\n   */\n  reschedule<T = RecordLogItem>(\n    current_card: CardInput | Card,\n    reviews: FSRSHistory[] = [],\n    options: Partial<RescheduleOptions<T>> = {}\n  ): IReschedule<T> {\n    const {\n      recordLogHandler,\n      reviewsOrderBy,\n      skipManual: skipManual = true,\n      now: now = new Date(),\n      update_memory_state: updateMemoryState = false,\n    } = options\n    if (reviewsOrderBy && typeof reviewsOrderBy === 'function') {\n      reviews.sort(reviewsOrderBy)\n    }\n    if (skipManual) {\n      reviews = reviews.filter((review) => review.rating !== Rating.Manual)\n    }\n    const rescheduleSvc = new Reschedule(this)\n\n    const collections = rescheduleSvc.reschedule(\n      options.first_card || createEmptyCard(),\n      reviews\n    )\n    const len = collections.length\n    const cur_card = TypeConvert.card(current_card)\n    const manual_item = rescheduleSvc.calculateManualRecord(\n      cur_card,\n      now,\n      len ? collections[len - 1] : undefined,\n      updateMemoryState\n    )\n\n    if (recordLogHandler && typeof recordLogHandler === 'function') {\n      return {\n        collections: collections.map(recordLogHandler),\n        reschedule_item: manual_item ? recordLogHandler(manual_item) : null,\n      }\n    }\n    return {\n      collections,\n      reschedule_item: manual_item,\n    } as IReschedule<T>\n  }\n}\n\n/**\n * Create a new instance of TS-FSRS\n * @param params FSRSParameters\n * @example\n * ```typescript\n * const f = fsrs();\n * ```\n * @example\n * ```typescript\n * const params: FSRSParameters = generatorParameters({ maximum_interval: 1000 });\n * const f = fsrs(params);\n * ```\n * @example\n * ```typescript\n * const f = fsrs({ maximum_interval: 1000 });\n * ```\n */\nexport const fsrs = (params?: Partial<FSRSParameters>) => {\n  return new FSRS(params || {})\n}\n", "import { asset, editor, system, space, datastore } from \"@silverbulletmd/silverbullet/syscalls\";\n//import { createEmptyCard, formatDate, fsrs, generatorParameters, Rating, Grades} from 'ts-fsrs';\nimport { createEmptyCard, fsrs, Rating} from 'ts-fsrs';\n\nexport function parse(text) {\n\n  const array1 = [...text.matchAll(/(.*)::(.*)/g)];\n\n  var regex = new RegExp('^(.+)\\\\n\\\\?\\\\n((?:(?:\\\\n|.+).+)+)', 'gm');\n  const array2 = [...text.matchAll(regex)];\n\n  \n  const array = array1.concat(array2);\n  var data = {}; \n  for(let j = 0;j < array.length; j++) {\n    var idBase64 = btoa(array[j][1] + array[j][2]);\n    data[idBase64] = {}\n    data[idBase64]['front'] = array[j][1].replace(/^- /gm, '').replace(/\\*\\*(.*?)\\*\\*/gm, '<strong>$1</strong>').replace(/\\*(.*?)\\*/gm, '<i>$1</i>');\n    data[idBase64]['back'] = array[j][2].replace(/\\r?\\n|\\r|\\n/g, '\\<br\\>').replace(/\\*\\*(.*?)\\*\\*/gm, '<strong>$1</strong>').replace(/\\*(.*?)\\*/gm, '<i>$1</i>');\n  }\n\n  //const start = new Date()\n  //console.log('time parse: ' + ((new Date()).getTime() - start.getTime()))\n  return data;\n}\n\nexport async function deleteDeck(page) {\n    console.log(\"delete deck \" + page)\n    await datastore.del([\"p_flashcards_\" + page] );\n}\n\nexport async function createDeck(page) {\n  console.log('start createDeck()');\n\n  var text = await space.readPage(page);\n  var QA = parse(text);\n  var qa_keys = Object.keys(QA);\n  console.log('before datastore get createDeck()');\n  var deck = await datastore.get([\"p_flashcards_\" + page])\n  console.log('after datastore get createDeck()');\n  var now = new Date();\n  const f = fsrs();\n\n  if (deck == undefined) {\n    // New deck\n    var deck = {};\n    deck['cards'] = {};\n    deck.lastModified = now.getTime();\n    qa_keys.forEach((k) => {        \n          let scheduling = createEmptyCard(new Date());        \n          deck['cards'][k] = {};\n          deck['cards'][k]['front'] = QA[k]['front'] \n          deck['cards'][k]['back'] = QA[k]['back']   \n          deck['cards'][k]['scheduling'] = scheduling\n      });\n    await datastore.set([\"p_flashcards_\" + page], deck)\n  } else {\n    var info = await space.getPageMeta(page);\n    var pageLastModified = new Date(info['lastModified']);\n    //deckLastModified = new Date(deck.lastModified);\n    // Check if page is modified since last check\n    if ( pageLastModified.getTime() > deck.lastModified ) {\n      console.log('deck check is less recent')\n      var deck_keys = Object.keys(deck['cards']);\n      qa_keys.forEach((k) => {\n        if(!deck_keys.includes(k)){\n          //console.log('create ' + e)\n          let scheduling = createEmptyCard(new Date());\n          deck['cards'][k] = {};\n          deck['cards'][k]['front'] = QA[k]['front']\n          deck['cards'][k]['back'] = QA[k]['back']\n          deck['cards'][k]['scheduling'] = scheduling\n        }\n      });\n      deck_keys.forEach((k) => {\n        if(!qa_keys.includes(k)){\n          delete deck['cards'][k];\n        }\n      });\n      deck.lastModified = now.getTime();\n      await datastore.set([\"p_flashcards_\" + page], deck)\n    }\n  }\n  console.log('end createDeck()');\n  return deck\n\n}\n\nexport async function updateDeck(page, deck, cardId, rating) {\n\n  const f = fsrs();\n  if (rating == \"again\") { var cardUpdated = f.next(deck['cards'][cardId]['scheduling'], new Date(), Rating.Again);};\n  if (rating == \"easy\") { var cardUpdated = f.next(deck['cards'][cardId]['scheduling'], new Date(), Rating.Easy);};\n  if (rating == \"good\") { var cardUpdated = f.next(deck['cards'][cardId]['scheduling'], new Date(), Rating.Good);};\n  if (rating == \"hard\") { var cardUpdated = f.next(deck['cards'][cardId]['scheduling'], new Date(), Rating.Hard);};\n  //console.log(deck['cards'][cardId]['scheduling']);\n  //console.log(cardUpdated['card']);\n  deck['cards'][cardId]['scheduling'] = cardUpdated['card'];\n\n  await datastore.set([\"p_flashcards_\" + page], deck)\n  return deck;\n}\n\nexport async function generateDecks() {\n  console.log('start generateDecks()');\n  const result = await system.invokeFunction(\"index.queryObjects\", \"flashcards\",\"page\");\n  var decksQA = {};\n  for(let i = 0;i < result.length; i++) {\n    var page = result[i][\"name\"];\n    decksQA[page] = await createDeck(page);\n  }\n  console.log('end generateDecks()');\n  return decksQA;\n}\n\nexport function generateDueCards(page, decks) {\n  var cards = decks[page]['cards']\n  var cards_keys = Object.keys(cards);\n  var dueCards = {}\n  const now = (new Date()).getTime()\n  cards_keys.forEach((k) => {\n    var cardDueDate = new Date(cards[k]['scheduling']['due'])\n    if( cardDueDate.getTime() < now ){\n      dueCards[k] = cards[k];\n    }\n  });\n  return dueCards\n}\n\n\nexport async function showDecks() {\n  console.log('start showDecks()');\n  const start = new Date()\n  const decks = await generateDecks();\n  const decks_keys = Object.keys(decks);\n  var decksHtml = await asset.readAsset(\"flashcard\",\"assets/decks.html\");\n  const decksJS = await asset.readAsset(\"flashcard\",\"assets/decks.js\");\n  for(let k = 0;k < decks_keys.length; k++) {\n    var page = decks_keys[k];\n    var cardsCount = Object.keys(decks[page]['cards']).length\n    var dueCards = generateDueCards(page, decks);\n    var dueCardsCount = (Object.keys(dueCards)).length;\n    if(dueCardsCount > 0) {\n      decksHtml += '<div style=\"display: inline-block; background-color: rgb(242, 247, 255); border-radius: 5px; padding: 10px; margin: 20px;\" onclick=\"syscall(\\'system.invokeFunction\\',\\'flashcard.showCards\\',\\'' + page + '\\');\"><span style=\"color: #0330cb\">' + page + '</span>  [ <span style=\"color: green\">' + dueCardsCount + '</span> ]     </div><button title=\"Reset cards\" onclick=\"if(window.confirm(\\'Delete cards history for ' + page +'\\')){syscall(\\'system.invokeFunction\\',\\'flashcard.deleteDeck\\',\\'' + page + '\\');syscall(\\'system.invokeFunction\\',\\'flashcard.showDecks\\')}\">&#x2715;</button><br>';\n    } else {\n      decksHtml += '<div style=\"display: inline-block; background-color: rgb(242, 247, 255); border-radius: 5px; padding: 10px; margin: 20px;\"><span style=\"color: #0330cb\">' + page + '</span>  [ <span style=\"color: green\">' + dueCardsCount + '</span> ]     </div><button title=\"Reset cards\" onclick=\"if(window.confirm(\\'Delete cards history for ' + page +'\\')){syscall(\\'system.invokeFunction\\',\\'flashcard.deleteDeck\\',\\'' + page + '\\');syscall(\\'system.invokeFunction\\',\\'flashcard.showDecks\\')}\">&#x2715;</button><br>';\n    }\n\n  }\n  \n  console.log('time showDecks: ' + ((new Date()).getTime() - start.getTime()))\n  await editor.showPanel(\"modal\", 50, decksHtml, decksJS );\n\n}\n\nexport async function showCards(page) {\n\n  console.log('start showCards()');\n  const cardHtml = await asset.readAsset(\"flashcard\", \"assets/cards.html\");\n  var cardJS = 'page = \\'' + page + '\\';';\n  cardJS += await asset.readAsset(\"flashcard\", \"assets/cards.js\");\n  await editor.showPanel(\"modal\", 50, cardHtml, cardJS );\n  console.log('end showCards()');\n}\n\nexport async function testFlashcards() {\n\n  console.log('start testFlashcards()');\n  //const params = generatorParameters({ enable_fuzz: true, enable_short_term: false });\n  \n  //var decks = await generateDecks();\n  //console.log(decks)\n\n  const f = fsrs();\n  let card = createEmptyCard();\n  console.log(card)\n  let card1 = f.next(card, new Date(), Rating.Easy);\n  console.log(card1)\n  let card2 = f.next(card1, new Date(), Rating.Easy);\n  console.log(card2)\n\n}\n", "\nimport { setupMessageListener } from \"https://deno.land/x/silverbullet@0.10.1/lib/plugos/worker_runtime.ts\";\n\n// Imports\nimport {updateDeck as updateDeck} from \"file:///data/flashcard.ts\";\nimport {createDeck as createDeck} from \"file:///data/flashcard.ts\";\nimport {deleteDeck as deleteDeck} from \"file:///data/flashcard.ts\";\nimport {showCards as showCards} from \"file:///data/flashcard.ts\";\nimport {showDecks as showDecks} from \"file:///data/flashcard.ts\";\n\n\n// Function mapping\nconst functionMapping = {\n  updateDeck: updateDeck,\n  createDeck: createDeck,\n  deleteDeck: deleteDeck,\n  showCards: showCards,\n  showDecks: showDecks,\n\n};\n\n// Manifest\nconst manifest = {\n  \"name\": \"flashcard\",\n  \"assets\": {\n    \"assets/decks.js\": {\n      \"data\": \"data:application/javascript;base64,Cg==\",\n      \"mtime\": 1733692282815\n    },\n    \"assets/decks.html\": {\n      \"data\": \"data:text/html;base64,PGRpdj4KICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgb25jbGljaz0ic3lzY2FsbCgnZWRpdG9yLmhpZGVQYW5lbCcsICdtb2RhbCcpIiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7IHRvcDowOyByaWdodDowOyIgdGl0bGU9IkNsb3NlIj4mI3gyNzE1OzwvYnV0dG9uPgo=\",\n      \"mtime\": 1733692282817\n    },\n    \"assets/cards.html\": {\n      \"data\": \"data:text/html;base64,PGRpdiBpZD0icmlnaHRib3giIHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjA7IHJpZ2h0OjA7Ij4KPGJ1dHRvbiB0eXBlPSJidXR0b24iIG9uY2xpY2s9InN5c2NhbGwoJ3N5c3RlbS5pbnZva2VGdW5jdGlvbicsJ2ZsYXNoY2FyZC5zaG93RGVja3MnKSI+JmxhcnI7PC9idXR0b24+CjxidXR0b24gdHlwZT0iYnV0dG9uIiBvbmNsaWNrPSJzeXNjYWxsKCdlZGl0b3IuaGlkZVBhbmVsJywgJ21vZGFsJykiICB0aXRsZT0iQ2xvc2UiPiYjeDI3MTU7PC9idXR0b24+CjwvZGl2Pgo8ZGl2IGlkPSJjb3VudCIgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlOyB0b3A6MDsgbGVmdDowOyI+PC9kaXY+Cgo8YnI+CjxkaXYgc3R5bGU9J3RleHQtYWxpZ246IGNlbnRlcjsnPgo8ZGl2IGlkPSJxdWVzdGlvbiI+PC9kaXY+CjxkaXYgaWQ9InNlcGFyYXRvciIgc3R5bGU9InZpc2liaWxpdHk6IGhpZGRlbiI+PGhyPjwvZGl2Pgo8ZGl2IGlkPSJhbnN3ZXIiIHN0eWxlPSJ2aXNpYmlsaXR5OiBoaWRkZW4iPjwvZGl2PgoKPGJyPjxicj4KPGRpdiBpZD0iZGlzcGxheSIgc3R5bGU9ImRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogY2VudGVyO3Zpc2liaWxpdHk6IHZpc2libGUiPgogIDxidXR0b24gdHlwZT0iYnV0dG9uIj5EaXNwbGF5IEFuc3dlcjwvYnV0dG9uPgo8L2Rpdj4KCjxkaXYgaWQ9InJhdGUiIHN0eWxlPSJkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjt2aXNpYmlsaXR5OiBoaWRkZW4iPgogIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iYWdhaW4iPkFnYWluPC9idXR0b24+CiAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJoYXJkIj5IYXJkPC9idXR0b24+CiAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJnb29kIj5Hb29kPC9idXR0b24+CiAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJlYXN5Ij5FYXN5PC9idXR0b24+ICAKPC9kaXY+Cg==\",\n      \"mtime\": 1733692282818\n    },\n    \"assets/cards.js\": {\n      \"data\": \"data:application/javascript;base64,CnZhciBxdWVzdGlvbmNvdW50ID0gMDsKCgpjb25zdCBhZ2FpbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhZ2FpbiIpOwpjb25zdCBoYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImhhcmQiKTsKY29uc3QgZ29vZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJnb29kIik7CmNvbnN0IGVhc3kgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZWFzeSIpOwoKY29uc3QgY291bnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY291bnQiKTsKY29uc3QgcXVlc3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicXVlc3Rpb24iKTsKY29uc3QgYW5zd2VyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFuc3dlciIpOwoKCgoKCmZ1bmN0aW9uIGdlbmVyYXRlRHVlQ2FyZHMoZGVjaykgewogIHZhciBjYXJkc19rZXlzID0gT2JqZWN0LmtleXMoZGVja1snY2FyZHMnXSk7CiAgdmFyIGR1ZUNhcmRzID0ge30KICBjb25zdCBub3cgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpCiAgY2FyZHNfa2V5cy5mb3JFYWNoKChrKSA9PiB7CiAgICB2YXIgY2FyZER1ZURhdGUgPSBuZXcgRGF0ZShkZWNrWydjYXJkcyddW2tdWydzY2hlZHVsaW5nJ11bJ2R1ZSddKTsKICAgIGlmKCBjYXJkRHVlRGF0ZS5nZXRUaW1lKCkgPCBub3cgKXsKICAgICAgZHVlQ2FyZHNba10gPSBkZWNrWydjYXJkcyddW2tdOwogICAgfQogIH0pOwogIHJldHVybiBkdWVDYXJkczsKfQoKCgoKCnZhciBkZWNrID0gc3lzY2FsbCgic3lzdGVtLmludm9rZUZ1bmN0aW9uIiwgImZsYXNoY2FyZC5jcmVhdGVEZWNrIiwgcGFnZSk7CmRlY2sudGhlbigoZCkgID0+IHsKICB2YXIgZHVlQ2FyZHMgPSBnZW5lcmF0ZUR1ZUNhcmRzKGQpOwogIHZhciBkdWVDYXJkc19rZXlzID0gT2JqZWN0LmtleXMoZHVlQ2FyZHMpOwoKICBjb3VudC50ZXh0Q29udGVudCA9IHBhZ2UgKyAnIC8gJyArIGR1ZUNhcmRzX2tleXMubGVuZ3RoOwoKICBxdWVzdGlvbi5pbm5lckhUTUwgPSBkdWVDYXJkc1tkdWVDYXJkc19rZXlzW3F1ZXN0aW9uY291bnRdXVsnZnJvbnQnXTsKICBhbnN3ZXIuaW5uZXJIVE1MID0gZHVlQ2FyZHNbZHVlQ2FyZHNfa2V5c1txdWVzdGlvbmNvdW50XV1bJ2JhY2snXTsKCiAgZnVuY3Rpb24gY2hhbmdlQ2FyZHMoYWN0aW9uKSB7CiAgICBpZihhY3Rpb24gPT0gInByZXZpb3VzIiApIHtxdWVzdGlvbmNvdW50IC09MTt9OwogICAgaWYoYWN0aW9uID09ICJuZXh0IiApIHtxdWVzdGlvbmNvdW50ICs9MTt9OwogICAgICAKICAgIGlmKHF1ZXN0aW9uY291bnQgPj0gMCAmJiBxdWVzdGlvbmNvdW50IDwgZHVlQ2FyZHNfa2V5cy5sZW5ndGgpIHsKICAgIGhpZGUoKTsKICAgIAogICAgY291bnQudGV4dENvbnRlbnQgPSBwYWdlICsgJyAvICcgKyBkdWVDYXJkc19rZXlzLmxlbmd0aDsKICAgIHF1ZXN0aW9uLmlubmVySFRNTCA9IGR1ZUNhcmRzW2R1ZUNhcmRzX2tleXNbcXVlc3Rpb25jb3VudF1dWydmcm9udCddOwogICAgYW5zd2VyLmlubmVySFRNTCA9IGR1ZUNhcmRzW2R1ZUNhcmRzX2tleXNbcXVlc3Rpb25jb3VudF1dWydiYWNrJ107CiAgICB9CiAgICAKICAgIGlmKHF1ZXN0aW9uY291bnQgPCAwKSB7cXVlc3Rpb25jb3VudCA9IDB9OwogICAgaWYocXVlc3Rpb25jb3VudCA+PSBkdWVDYXJkc19rZXlzLmxlbmd0aCkge3F1ZXN0aW9uY291bnQgPSBkdWVDYXJkc19rZXlzLmxlbmd0aCAtIDF9OwogIH0KCi8vcHJldmlvdXMuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7IGNoYW5nZUNhcmRzKCdwcmV2aW91cycpIH0pOwoKICBmdW5jdGlvbiB1cGRhdGVDYXJkKHJhdGluZykgewogICAgdmFyIGRlY2tVcGRhdGVkID0gc3lzY2FsbCgic3lzdGVtLmludm9rZUZ1bmN0aW9uIiwgImZsYXNoY2FyZC51cGRhdGVEZWNrIiwgcGFnZSwgZCwgZHVlQ2FyZHNfa2V5c1txdWVzdGlvbmNvdW50XSwgcmF0aW5nKTsKICAgIGRlY2tVcGRhdGVkLnRoZW4oKGR1KSAgPT4gewogICAgICAvL2NvbnNvbGUubG9nKGR1KTsKICAgICAgZCA9IGR1OwogICAgICBkdWVDYXJkcyA9IGdlbmVyYXRlRHVlQ2FyZHMoZHUpOwogICAgICBjaGFuZ2VDYXJkcygnbmV4dCcpOwogICAgfSk7CiAgfQoKZnVuY3Rpb24gc2hvdygpIHsKICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VwYXJhdG9yJykuc3R5bGUudmlzaWJpbGl0eT0ndmlzaWJsZSc7CiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fuc3dlcicpLnN0eWxlLnZpc2liaWxpdHk9J3Zpc2libGUnOwogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYXRlJykuc3R5bGUudmlzaWJpbGl0eT0ndmlzaWJsZSc7CiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rpc3BsYXknKS5zdHlsZS52aXNpYmlsaXR5PSdoaWRkZW4nOwp9CgpmdW5jdGlvbiBoaWRlKCkgewogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXBhcmF0b3InKS5zdHlsZS52aXNpYmlsaXR5PSdoaWRkZW4nOwogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbnN3ZXInKS5zdHlsZS52aXNpYmlsaXR5PSdoaWRkZW4nOwogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYXRlJykuc3R5bGUudmlzaWJpbGl0eT0naGlkZGVuJzsKICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlzcGxheScpLnN0eWxlLnZpc2liaWxpdHk9J3Zpc2libGUnOwp9CgpxdWVzdGlvbi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHsgc2hvdygpIH0pOwpkaXNwbGF5LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4geyBzaG93KCkgfSk7CmFnYWluLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4geyB1cGRhdGVDYXJkKCdhZ2FpbicpIH0pOwpoYXJkLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4geyB1cGRhdGVDYXJkKCdoYXJkJykgfSk7Cmdvb2QuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7IHVwZGF0ZUNhcmQoJ2dvb2QnKSB9KTsKZWFzeS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHsgdXBkYXRlQ2FyZCgnZWFzeScpIH0pOwp9KTsKCgo=\",\n      \"mtime\": 1733692282819\n    }\n  },\n  \"functions\": {\n    \"updateDeck\": {\n      \"path\": \"flashcard.ts:updateDeck\"\n    },\n    \"createDeck\": {\n      \"path\": \"flashcard.ts:createDeck\"\n    },\n    \"deleteDeck\": {\n      \"path\": \"flashcard.ts:deleteDeck\"\n    },\n    \"showCards\": {\n      \"path\": \"flashcard.ts:showCards\"\n    },\n    \"showDecks\": {\n      \"path\": \"flashcard.ts:showDecks\",\n      \"command\": {\n        \"name\": \"Flashcards\"\n      }\n    }\n  }\n};\n\nexport const plug = {manifest, functionMapping};\n\nsetupMessageListener(functionMapping, manifest, self.postMessage);\n"],
  "mappings": ";;;;;;;AAQA,IAAI,oBAAoB,CAAC,SAAkC;AACzD,QAAM,IAAI,MAAM,qBAAqB;AACvC;AAUA,IAAM,qBAAqB,OAAO,WAAW;AAE3C,OAAO,WAAW,kBAAkB;AAEtC,IAAI,OAAO,SAAS,aAAa;AAE/B,OAAK,OAAO;AAAA,IACV,MAAM,CAAC;AAAA;AAAA,IAEP,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,IACA,KAAK;AAAA;AAAA,MAEH,MAAM;AAAA,MACN;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,kBAAkB,oBAAI,IAM1B;AAEF,IAAI,eAAe;AAEnB,IAAI,oBAAoB;AACtB,aAAW,UAAU,OAAO,SAAiB,SAAgB;AAC3D,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C;AACA,sBAAgB,IAAI,cAAc,EAAE,SAAS,OAAO,CAAC;AACrD,wBAAkB;AAAA,QAChB,MAAM;AAAA,QACN,IAAI;AAAA,QACJ;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;AAEO,SAAS,qBAEdA,kBACAC,WACA,eACA;AACA,MAAI,CAAC,oBAAoB;AAGvB;AAAA,EACF;AACA,sBAAoB;AACpB,OAAK,iBAAiB,WAAW,CAAC,UAAmC;AACnE,KAAC,YAAY;AACX,YAAM,OAAO,MAAM;AACnB,cAAQ,KAAK,MAAM;AAAA,QACjB,KAAK;AACH;AACE,kBAAM,KAAKD,iBAAgB,KAAK,IAAK;AACrC,gBAAI,CAAC,IAAI;AACP,oBAAM,IAAI,MAAM,wBAAwB,KAAK,IAAI,EAAE;AAAA,YACrD;AACA,gBAAI;AACF,oBAAM,SAAS,MAAM,QAAQ,QAAQ,GAAG,GAAI,KAAK,QAAQ,CAAC,CAAE,CAAC;AAC7D,gCAAkB;AAAA,gBAChB,MAAM;AAAA,gBACN,IAAI,KAAK;AAAA,gBACT;AAAA,cACF,CAAsB;AAAA,YACxB,SAAS,GAAQ;AACf,sBAAQ;AAAA,gBACN;AAAA,gBACA,KAAK;AAAA,gBACL;AAAA,gBACA,EAAE;AAAA,cACJ;AACA,gCAAkB;AAAA,gBAChB,MAAM;AAAA,gBACN,IAAI,KAAK;AAAA,gBACT,OAAO,EAAE;AAAA,cACX,CAAC;AAAA,YACH;AAAA,UACF;AACA;AAAA,QACF,KAAK;AACH;AACE,kBAAM,YAAY,KAAK;AACvB,kBAAM,SAAS,gBAAgB,IAAI,SAAS;AAC5C,gBAAI,CAAC,QAAQ;AACX,oBAAM,MAAM,oBAAoB;AAAA,YAClC;AACA,4BAAgB,OAAO,SAAS;AAChC,gBAAI,KAAK,OAAO;AACd,qBAAO,OAAO,IAAI,MAAM,KAAK,KAAK,CAAC;AAAA,YACrC,OAAO;AACL,qBAAO,QAAQ,KAAK,MAAM;AAAA,YAC5B;AAAA,UACF;AAEA;AAAA,MACJ;AAAA,IACF,GAAG,EAAE,MAAM,QAAQ,KAAK;AAAA,EAC1B,CAAC;AAED,oBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,UAAAC;AAAA,EACF,CAAC;AACH;AAEO,SAAS,aAAa,GAAuB;AAClD,QAAM,YAAY,KAAK,CAAC;AACxB,QAAM,MAAM,UAAU;AACtB,QAAM,QAAQ,IAAI,WAAW,GAAG;AAChC,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,UAAM,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,EACnC;AACA,SAAO;AACT;AAEO,SAAS,aAAa,QAAqC;AAChE,MAAI,OAAO,WAAW,UAAU;AAC9B,aAAS,IAAI,YAAY,EAAE,OAAO,MAAM;AAAA,EAC1C;AACA,MAAI,SAAS;AACb,QAAM,MAAM,OAAO;AACnB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,cAAU,OAAO,aAAa,OAAO,CAAC,CAAC;AAAA,EACzC;AACA,SAAO,KAAK,MAAM;AACpB;AAEA,eAAsB,aACpB,SACA,SAC6B;AAC7B,MAAI,OAAO,YAAY,UAAU;AAC/B,UAAM,OAAO,IAAI,WAAW,MAAM,QAAQ,YAAY,CAAC;AACvD,UAAM,cAAc,KAAK,SAAS,IAAI,aAAa,IAAI,IAAI;AAC3D,cAAU;AAAA,MACR,QAAQ,QAAQ;AAAA,MAChB,SAAS,OAAO,YAAY,QAAQ,QAAQ,QAAQ,CAAC;AAAA,MACrD,YAAY;AAAA,IACd;AACA,cAAU,QAAQ;AAAA,EACpB;AACA,SAAO,QAAQ,sBAAsB,SAAS,OAAO;AACvD;AAGA,WAAW,cAAc,WAAW;AAE7B,SAAS,mBAAmB;AAEjC,aAAW,QAAQ,eACjB,SACA,MACmB;AACnB,UAAM,cAAc,QAAQ,KAAK,OAC7B;AAAA,MACA,IAAI,WAAW,MAAO,IAAI,SAAS,KAAK,IAAI,EAAG,YAAY,CAAC;AAAA,IAC9D,IACE;AACJ,UAAM,IAAI,MAAM;AAAA,MACd;AAAA,MACA,QAAQ;AAAA,QACN,QAAQ,KAAK;AAAA,QACb,SAAS,KAAK;AAAA,QACd,YAAY;AAAA,MACd;AAAA,IACF;AACA,WAAO,IAAI,SAAS,EAAE,aAAa,aAAa,EAAE,UAAU,IAAI,MAAM;AAAA,MACpE,QAAQ,EAAE;AAAA,MACV,SAAS,EAAE;AAAA,IACb,CAAC;AAAA,EACH;AACF;AAEA,IAAI,oBAAoB;AACtB,mBAAiB;AACnB;;;AC7MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACKA,IAAI,OAAO,SAAS,aAAa;AAC/B,EAAC,OAAe;AAAA,IACd,SAAS,MAAM;AACb,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAAA,EACF;AACF;AAGO,SAASC,SAAQ,SAAiB,MAA2B;AAClE,SAAQ,WAAmB,QAAQ,MAAM,GAAG,IAAI;AAClD;;;ADDO,SAAS,iBAAkC;AAChD,SAAOC,SAAQ,uBAAuB;AACxC;AAKO,SAAS,UAA2B;AACzC,SAAOA,SAAQ,gBAAgB;AACjC;AAMO,SAAS,QACd,SACA,iBAAiB,OACF;AACf,SAAOA,SAAQ,kBAAkB,SAAS,cAAc;AAC1D;AAKO,SAAS,YAA6B;AAC3C,SAAOA,SAAQ,kBAAkB;AACnC;AAKO,SAAS,eAAsD;AACpE,SAAOA,SAAQ,qBAAqB;AACtC;AAOO,SAAS,aAAa,MAAc,IAA2B;AACpE,SAAOA,SAAQ,uBAAuB,MAAM,EAAE;AAChD;AAKO,SAAS,OAAsB;AACpC,SAAOA,SAAQ,aAAa;AAC9B;AAQO,SAAS,SACd,SACA,eAAe,OACfC,aAAY,OACG;AACf,SAAOD,SAAQ,mBAAmB,SAAS,cAAcC,UAAS;AACpE;AAMO,SAAS,kBACd,OAAgC,QACjB;AACf,SAAOD,SAAQ,4BAA4B,IAAI;AACjD;AAKO,SAAS,qBAAoC;AAClD,SAAOA,SAAQ,2BAA2B;AAC5C;AAKO,SAAS,aAA4B;AAC1C,SAAOA,SAAQ,mBAAmB;AACpC;AAKO,SAAS,WAA0B;AACxC,SAAOA,SAAQ,iBAAiB;AAClC;AAKO,SAAS,0BAAyC;AACvD,SAAOA,SAAQ,gCAAgC;AACjD;AAOO,SAAS,QAAQ,KAAa,iBAAiB,OAAsB;AAC1E,SAAOA,SAAQ,kBAAkB,KAAK,cAAc;AACtD;AAEO,SAAS,YAA2B;AACzC,SAAOA,SAAQ,kBAAkB;AACnC;AAOO,SAAS,UAAU,OAA8B;AACtD,SAAOA,SAAQ,oBAAoB,KAAK;AAC1C;AAOO,SAAS,aAAa,UAAkB,SAAgC;AAC7E,SAAOA,SAAQ,uBAAuB,UAAU,OAAO;AACzD;AAOO,SAAS,WACd,QACA,SACqB;AACrB,SAAOA,SAAQ,qBAAqB,QAAQ,OAAO;AACrD;AAOO,SAAS,kBACd,SACA,OAAyB,QACV;AACf,SAAOA,SAAQ,4BAA4B,SAAS,IAAI;AAC1D;AASO,SAAS,UACd,OACA,SACA,WAAW,IACX,cAAc,IACqB;AACnC,SAAOA,SAAQ,oBAAoB,OAAO,SAAS,UAAU,WAAW;AAC1E;AASO,SAAS,UACd,IACA,MACA,MACA,SAAS,IACM;AACf,SAAOA,SAAQ,oBAAoB,IAAI,MAAM,MAAM,MAAM;AAC3D;AAMO,SAAS,UACd,IACe;AACf,SAAOA,SAAQ,oBAAoB,EAAE;AACvC;AAOO,SAAS,YAAY,MAAc,KAA4B;AACpE,SAAOA,SAAQ,sBAAsB,MAAM,GAAG;AAChD;AAQO,SAAS,aACd,MACA,IACA,MACe;AACf,SAAOA,SAAQ,uBAAuB,MAAM,IAAI,IAAI;AACtD;AAOO,SAAS,WAAW,KAAa,SAAS,OAAsB;AACrE,SAAOA,SAAQ,qBAAqB,KAAK,MAAM;AACjD;AAQO,SAAS,iBACd,MACA,SAAS,GACT,SAAS,OACM;AACf,SAAOA,SAAQ,2BAA2B,MAAM,QAAQ,MAAM;AAChE;AAMO,SAAS,eAAe,MAA6B;AAC1D,SAAOA,SAAQ,yBAAyB,IAAI;AAC9C;AAKO,SAAS,SAAS,QAA4B;AACnD,SAAOA,SAAQ,mBAAmB,MAAM;AAC1C;AAQO,SAAS,OACd,SACA,eAAe,IACc;AAC7B,SAAOA,SAAQ,iBAAiB,SAAS,YAAY;AACvD;AAOO,SAAS,QACd,SACkB;AAClB,SAAOA,SAAQ,kBAAkB,OAAO;AAC1C;AAOO,SAAS,YAAY,KAA2B;AACrD,SAAOA,SAAQ,sBAAsB,GAAG;AAC1C;AAOO,SAAS,YAAY,KAAa,OAA2B;AAClE,SAAOA,SAAQ,sBAAsB,KAAK,KAAK;AACjD;AAKO,SAAS,OAAsB;AACpC,SAAOA,SAAQ,aAAa;AAC9B;AAKO,SAAS,SAAwB;AACtC,SAAOA,SAAQ,eAAe;AAChC;AAKO,SAAS,aAA4B;AAC1C,SAAOA,SAAQ,mBAAmB;AACpC;AAKO,SAAS,UAAyB;AACvC,SAAOA,SAAQ,gBAAgB;AACjC;AAKO,SAAS,YAA2B;AACzC,SAAOA,SAAQ,kBAAkB;AACnC;AAKO,SAAS,OAAsB;AACpC,SAAOA,SAAQ,aAAa;AAC9B;AAKO,SAAS,OAAsB;AACpC,SAAOA,SAAQ,aAAa;AAC9B;AAKO,SAAS,kBAAiC;AAC/C,SAAOA,SAAQ,wBAAwB;AACzC;AAMO,SAAS,gBAAgB,MAAoC;AAClE,SAAOA,SAAQ,0BAA0B,IAAI;AAC/C;AAKO,SAAS,aAA4B;AAC1C,SAAOA,SAAQ,mBAAmB;AACpC;AAQO,SAAS,MAAM,WAAiC;AACrD,SAAOA,SAAQ,gBAAgB,SAAS;AAC1C;;;AE9YA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaO,SAAS,YAAiC;AAC/C,SAAOE,SAAQ,iBAAiB;AAClC;AAOO,SAAS,YAAY,MAAiC;AAC3D,SAAOA,SAAQ,qBAAqB,IAAI;AAC1C;AAOO,SAAS,SACd,MACiB;AACjB,SAAOA,SAAQ,kBAAkB,IAAI;AACvC;AAQO,SAAS,UAAU,MAAc,MAAiC;AACvE,SAAOA,SAAQ,mBAAmB,MAAM,IAAI;AAC9C;AAMO,SAAS,WAAW,MAA6B;AACtD,SAAOA,SAAQ,oBAAoB,IAAI;AACzC;AAMO,SAAS,YAAiC;AAC/C,SAAOA,SAAQ,iBAAiB;AAClC;AAMO,SAAS,kBAA6C;AAC3D,SAAOA,SAAQ,uBAAuB;AACxC;AAOO,SAAS,kBAAkB,MAAuC;AACvE,SAAOA,SAAQ,2BAA2B,IAAI;AAChD;AAOO,SAAS,eACd,MACqB;AACrB,SAAOA,SAAQ,wBAAwB,IAAI;AAC7C;AAQO,SAAS,gBACd,MACA,MACyB;AACzB,SAAOA,SAAQ,yBAAyB,MAAM,IAAI;AACpD;AAMO,SAAS,iBAAiB,MAA6B;AAC5D,SAAOA,SAAQ,0BAA0B,IAAI;AAC/C;AAQO,SAAS,YAAiC;AAC/C,SAAOA,SAAQ,iBAAiB;AAClC;AAOO,SAAS,SAAS,MAAmC;AAC1D,SAAOA,SAAQ,kBAAkB,IAAI;AACvC;AAOO,SAAS,YAAY,MAAiC;AAC3D,SAAOA,SAAQ,qBAAqB,IAAI;AAC1C;AAQO,SAAS,UACd,MACA,MACmB;AACnB,SAAOA,SAAQ,mBAAmB,MAAM,IAAI;AAC9C;AAMO,SAAS,WAAW,MAA6B;AACtD,SAAOA,SAAQ,oBAAoB,IAAI;AACzC;AAEO,SAAS,WAAW,MAAgC;AACzD,SAAOA,SAAQ,oBAAoB,IAAI;AACzC;;;ACnKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBO,SAAS,eACd,SACG,MACW;AACd,SAAOC,SAAQ,yBAAyB,MAAM,GAAG,IAAI;AACvD;AAQO,SAAS,cAAc,MAAc,MAA+B;AACzE,SAAOA,SAAQ,wBAAwB,MAAM,IAAI;AACnD;AAMO,SAAS,eAAoD;AAClE,SAAOA,SAAQ,qBAAqB;AACtC;AAMO,SAAS,eAAuC;AACrD,SAAOA,SAAQ,qBAAqB;AACtC;AAQO,SAAS,oBACd,SACG,MACW;AACd,SAAOA,SAAQ,8BAA8B,MAAM,GAAG,IAAI;AAC5D;AAKO,SAAS,yBACd,MACA,MACA,MACgC;AAChC,SAAOA,SAAQ,mCAAmC,MAAM,MAAM,IAAI;AACpE;AAQA,eAAsB,eACpB,KACA,cACc;AACd,SAAQ,MAAMA,SAAQ,yBAAyB,GAAG,KAAM;AAC1D;AAMO,SAAS,cAA6B;AAC3C,SAAOA,SAAQ,oBAAoB;AACrC;AAMO,SAAS,eAAgC;AAC9C,SAAOA,SAAQ,qBAAqB;AACtC;AAKO,SAAS,SAAsC;AACpD,SAAOA,SAAQ,eAAe;AAChC;AAKO,SAAS,UAAgC;AAC9C,SAAOA,SAAQ,gBAAgB;AACjC;AAKO,SAAS,aAA8B;AAC5C,SAAOA,SAAQ,mBAAmB;AACpC;;;AC1HA;AAAA;AAAA;AAAA;;;ACaO,SAASC,cAAa,GAAuB;AAClD,QAAM,YAAY,KAAK,CAAC;AACxB,QAAM,MAAM,UAAU;AACtB,QAAM,QAAQ,IAAI,WAAW,GAAG;AAChC,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,UAAM,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,EACnC;AACA,SAAO;AACT;AAqBO,SAAS,oBAAoB,SAA6B;AAC/D,QAAM,aAAa,QAAQ,MAAM,KAAK,CAAC,EAAE,CAAC;AAC1C,SAAOC,cAAa,UAAU;AAChC;;;ADnCA,eAAsB,UACpB,UACA,MACA,WAA+B,QACd;AACjB,QAAM,UAAU,MAAMC,SAAQ,mBAAmB,UAAU,IAAI;AAC/D,UAAQ,UAAU;AAAA,IAChB,KAAK;AACH,aAAO,IAAI,YAAY,EAAE,OAAO,oBAAoB,OAAO,CAAC;AAAA,IAC9D,KAAK;AACH,aAAO;AAAA,EACX;AACF;;;AEtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaO,SAAS,IAAI,KAAY,OAA2B;AACzD,SAAOC,SAAQ,iBAAiB,KAAK,KAAK;AAC5C;AAMO,SAAS,SAAS,KAA0B;AACjD,SAAOA,SAAQ,sBAAsB,GAAG;AAC1C;AAOO,SAAS,IAAI,KAAsC;AACxD,SAAOA,SAAQ,iBAAiB,GAAG;AACrC;AAOO,SAAS,SAAS,MAA6C;AACpE,SAAOA,SAAQ,sBAAsB,IAAI;AAC3C;AAMO,SAAS,IAAI,KAA2B;AAC7C,SAAOA,SAAQ,oBAAoB,GAAG;AACxC;AAMO,SAAS,SAAS,MAA8B;AACrD,SAAOA,SAAQ,yBAAyB,IAAI;AAC9C;AAQO,SAAS,MACdC,QACA,YAAiC,CAAC,GACnB;AACf,SAAOD,SAAQ,mBAAmBC,QAAO,SAAS;AACpD;AAOO,SAAS,YACdA,QACA,WACe;AACf,SAAOD,SAAQ,yBAAyBC,QAAO,SAAS;AAC1D;AAMO,SAAS,gBAAmC;AACjD,SAAOD,SAAQ,yBAAyB;AAC1C;;;ACxFO,IAAKE,KAAAA,QACVA,EAAAA,EAAA,MAAM,CAAN,IAAA,OACAA,EAAAA,EAAA,WAAW,CAAA,IAAX,YACAA,EAAAC,EAAA,SAAS,CAAA,IAAT,UACAD,EAAAA,EAAA,aAAa,CAAb,IAAA,cAJUA,IAAAA,KASA,CAAA,CAAA;AATL,IASKE,KAAAA,QACVA,EAAAA,EAAA,SAAS,CAAT,IAAA,UACAA,EAAAA,EAAA,QAAQ,CAAA,IAAR,SACAA,EAAAC,EAAA,OAAO,CAAA,IAAP,QACAD,EAAAA,EAAA,OAAO,CAAP,IAAA,QACAA,EAAAA,EAAA,OAAO,CAAA,IAAP,QALUA,IAAAA,KAAA,CAAA,CAAA;ACDC,IAAAE,IAAA,MAAAA,GAAY;EACvB,OAAO,KAAiCC,GAAe;AACrD,WAAO,EACL,GAAGA,GACH,OAAOD,GAAY,MAAMC,EAAK,KAAK,GACnC,KAAKD,GAAY,KAAKC,EAAK,GAAG,GAC9B,aAAaA,EAAK,cACdD,GAAY,KAAKC,EAAK,WAAW,IACjC,OACN;EACF;EACA,OAAO,OAAOC,GAAwB;AACpC,QAAI,OAAOA,KAAU,UAAU;AAC7B,YAAMC,IAAcD,EAAM,OAAO,CAAC,EAAE,YAAA,GAC9BE,IAAeF,EAAM,MAAM,CAAC,EAAE,YAAA,GAC9BG,IAAMP,EAAO,GAAGK,CAAW,GAAGC,CAAY,EAAyB;AACzE,UAAIC,MAAQ;AACV,cAAM,IAAI,MAAM,mBAAmBH,CAAK,GAAG;AAE7C,aAAOG;IACT,WAAW,OAAOH,KAAU;AAC1B,aAAOA;AAET,UAAM,IAAI,MAAM,mBAAmBA,CAAK,GAAG;EAC7C;EACA,OAAO,MAAMA,GAAuB;AAClC,QAAI,OAAOA,KAAU,UAAU;AAC7B,YAAMC,IAAcD,EAAM,OAAO,CAAC,EAAE,YAAY,GAC1CE,IAAeF,EAAM,MAAM,CAAC,EAAE,YAC9BG,GAAAA,IAAMT,EAAM,GAAGO,CAAW,GAAGC,CAAY,EAAwB;AACvE,UAAIC,MAAQ;AACV,cAAM,IAAI,MAAM,kBAAkBH,CAAK,GAAG;AAE5C,aAAOG;IACT,WAAW,OAAOH,KAAU;AAC1B,aAAOA;AAET,UAAM,IAAI,MAAM,kBAAkBA,CAAK,GAAG;EAC5C;EACA,OAAO,KAAKA,GAAsB;AAChC,QAAI,OAAOA,KAAU,YAAYA,aAAiB;AAChD,aAAOA;AACF,QAAI,OAAOA,KAAU,UAAU;AACpC,YAAMI,IAAY,KAAK,MAAMJ,CAAK;AAClC,UAAK,MAAMI,CAAS;AAGlB,cAAM,IAAI,MAAM,iBAAiBJ,CAAK,GAAG;AAFzC,aAAO,IAAI,KAAKI,CAAS;IAI7B,WAAW,OAAOJ,KAAU;AAC1B,aAAO,IAAI,KAAKA,CAAK;AAEvB,UAAM,IAAI,MAAM,iBAAiBA,CAAK,GAAG;EAC3C;EACA,OAAO,WAAWK,GAA4C;AAC5D,WAAO,EACL,GAAGA,GACH,KAAKP,GAAY,KAAKO,EAAI,GAAG,GAC7B,QAAQP,GAAY,OAAOO,EAAI,MAAM,GACrC,OAAOP,GAAY,MAAMO,EAAI,KAAK,GAClC,QAAQP,GAAY,KAAKO,EAAI,MAAM,EACrC;EACF;AACF;ACtEO,IAAMC,IAA4B;AAAlC,IACMC,IAA2B;AADjC,IAEMC,IAAY,CACvB,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,OACjE,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAChE,MACF;AANO,IAOMC,IAAsB;AAP5B,IAQMC,IAA4B;AARlC,IAYMC,IACXC,OACmB;AACnB,MAAIC,IAAIC;AACR,SAAIF,GAAO,MACLA,EAAM,EAAE,WAAW,KACrBC,IAAID,GAAO,IACFA,EAAM,EAAE,WAAW,OAC5BC,IAAID,GAAO,EAAE,OAAO,CAAC,GAAK,CAAG,CAAC,GAC9BC,EAAE,CAAC,IAAI,EAAEA,EAAE,CAAC,IAAI,IAAMA,EAAE,CAAC,GAAG,QAAQ,CAAC,GACrCA,EAAE,CAAC,IAAI,EAAE,KAAK,IAAIA,EAAE,CAAC,IAAI,IAAM,CAAG,IAAI,GAAK,QAAQ,CAAC,GACpD,QAAQ,MAAM,mCAAmC,KAG9C,EACL,mBAAmBD,GAAO,qBAAqBG,GAC/C,kBAAkBH,GAAO,oBAAoBI,GAC7C,GAAGH,GACH,aAAaD,GAAO,eAAeK,GACnC,mBAAmBL,GAAO,qBAAqBM,EACjD;AACF;AAgCO,SAASC,EACdC,GACAC,GACG;AACH,QAAMC,IAAkB,EACtB,KAAKF,IAAMG,EAAY,KAAKH,CAAG,IAAI,oBAAI,QACvC,WAAW,GACX,YAAY,GACZ,cAAc,GACd,gBAAgB,GAChB,MAAM,GACN,QAAQ,GACR,OAAOI,EAAM,KACb,aAAa,OACf;AACA,SAAIH,KAAgB,OAAOA,KAAiB,aACnCA,EAAaC,CAAS,IAEtBA;AAEX;ACvEA,KAAK,UAAU,YAAY,SAAUG,GAAQC,GAAuB;AAClE,SAAOC,EAAe,MAAMF,GAAGC,CAAK;AACtC,GAOA,KAAK,UAAU,OAAO,SAAUE,GAAWC,GAAiB;AAC1D,SAAOC,EAAU,MAAMF,GAAKC,CAAI;AAClC,GAEA,KAAK,UAAU,SAAS,WAAoB;AAC1C,SAAOE,EAAW,IAAI;AACxB,GAEA,KAAK,UAAU,YAAY,SACzBC,GACAH,GACAI,GACA;AACA,SAAOC,EAAkB,MAAMF,GAAaH,GAAMI,CAAQ;AAC5D;AASO,SAASN,EACdP,GACAK,GACAC,GACM;AACN,SAAO,IAAI,KACTA,IACIS,EAAQf,CAAG,EAAE,QAAQ,IAAIK,IAAI,KAAK,KAAK,KAAK,MAC5CU,EAAQf,CAAG,EAAE,QAAQ,IAAIK,IAAI,KAAK,GACxC;AACF;AAEgB,SAAAK,EAAUV,GAAgBQ,GAAgBC,GAAoB;AAC5E,MAAI,CAACT,KAAO,CAACQ;AACX,UAAM,IAAI,MAAM,cAAc;AAEhC,QAAMQ,IAAOD,EAAQf,CAAG,EAAE,QAAQ,IAAIe,EAAQP,CAAG,EAAE,QAAQ;AAC3D,MAAIS,IAAI;AACR,UAAQR,GACN;IAAA,KAAK;AACHQ,UAAI,KAAK,MAAMD,KAAQ,KAAK,KAAK,KAAK,IAAK;AAC3C;IACF,KAAK;AACHC,UAAI,KAAK,MAAMD,KAAQ,KAAK,IAAK;AACjC;EACJ;AACA,SAAOC;AACT;AAEO,SAASN,EAAWO,GAA8B;AACvD,QAAMC,IAAOJ,EAAQG,CAAS,GACxBE,IAAeD,EAAK,YACpBE,GAAAA,IAAgBF,EAAK,SAAA,IAAa,GAClCG,IAAcH,EAAK,QAAQ,GAC3BI,IAAgBJ,EAAK,SAAA,GACrBK,IAAkBL,EAAK,WACvBM,GAAAA,IAAkBN,EAAK,WAAW;AAExC,SAAO,GAAGC,CAAI,IAAIM,EAAQL,CAAK,CAAC,IAAIK,EAAQJ,CAAG,CAAC,IAAII,EAAQH,CAAK,CAAC,IAAIG,EACpEF,CACF,CAAC,IAAIE,EAAQD,CAAO,CAAC;AACvB;AAEA,SAASC,EAAQC,GAAqB;AACpC,SAAOA,IAAM,KAAK,IAAIA,CAAG,KAAK,GAAGA,CAAG;AACtC;AAEA,IAAMC,IAAW,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE;AAApC,IACMC,IAAiB,CAAC,UAAU,OAAO,QAAQ,OAAO,SAAS,MAAM;AAEvD,SAAAf,EACdgB,GACAlB,GACAH,GACAI,IAAqBgB,GACb;AACRC,MAAMf,EAAQe,CAAG,GACjBlB,IAAcG,EAAQH,CAAW,GAC7BC,EAAS,WAAWgB,EAAe,WACrChB,IAAWgB;AAEb,MAAIb,IAAOc,EAAI,QAAA,IAAYlB,EAAY,QAAQ,GAC3CmB;AAEJ,OADAf,KAAQ,KACHe,IAAI,GAAGA,IAAIH,EAAS,UACnB,EAAAZ,IAAOY,EAASG,CAAC,IADUA;AAI7Bf,SAAQY,EAASG,CAAC;AAGtB,SAAO,GAAG,KAAK,MAAMf,CAAI,CAAC,GAAGP,IAAOI,EAASkB,CAAC,IAAI,EAAE;AACtD;AAMgB,SAAAhB,EAAQiB,GAAgB;AACtC,SAAO7B,EAAY,KAAK6B,CAAK;AAC/B;AAgBa,IAAAC,IAA4B,CACvCC,EAAO,OACPA,EAAO,MACPA,EAAO,MACPA,EAAO,IACT;AALa,IAOPC,IAAc,CAClB,EACE,OAAO,KACP,KAAK,GACL,QAAQ,KACV,GACA,EACE,OAAO,GACP,KAAK,IACL,QAAQ,IACV,GACA,EACE,OAAO,IACP,KAAK,IAAA,GACL,QAAQ,KACV,CACF;AAEgB,SAAAC,EACdC,GACAC,GACAC,GACA;AACA,MAAIC,IAAQ;AACZ,aAAWC,KAASN;AAClBK,SACEC,EAAM,SAAS,KAAK,IAAI,KAAK,IAAIJ,GAAUI,EAAM,GAAG,IAAIA,EAAM,OAAO,CAAG;AAE5EJ,MAAW,KAAK,IAAIA,GAAUE,CAAgB;AAC9C,MAAIG,IAAU,KAAK,IAAI,GAAG,KAAK,MAAML,IAAWG,CAAK,CAAC;AACtD,QAAMG,IAAU,KAAK,IAAI,KAAK,MAAMN,IAAWG,CAAK,GAAGD,CAAgB;AACvE,SAAIF,IAAWC,MACbI,IAAU,KAAK,IAAIA,GAASJ,IAAe,CAAC,IAE9CI,IAAU,KAAK,IAAIA,GAASC,CAAO,GAC5B,EAAE,SAAAD,GAAS,SAAAC,EAAQ;AAC5B;AAEgB,SAAAC,EAAMC,GAAeC,GAAaC,GAAqB;AACrE,SAAO,KAAK,IAAI,KAAK,IAAIF,GAAOC,CAAG,GAAGC,CAAG;AAC3C;AC/JA,IAAMC,IAAN,MAAW;EACD;EACA;EACA;EACA;EAER,YAAYC,GAAwB;AAClC,UAAMC,IAAOC,EAAK;AAClB,SAAK,IAAI,GACT,KAAK,KAAKD,EAAK,GAAG,GAClB,KAAK,KAAKA,EAAK,GAAG,GAClB,KAAK,KAAKA,EAAK,GAAG,GACdD,KAAQ,SAAMA,IAAO,CAAC,oBAAI,SAC9B,KAAK,MAAMC,EAAKD,CAAI,GAChB,KAAK,KAAK,MAAG,KAAK,MAAM,IAC5B,KAAK,MAAMC,EAAKD,CAAI,GAChB,KAAK,KAAK,MAAG,KAAK,MAAM,IAC5B,KAAK,MAAMC,EAAKD,CAAI,GAChB,KAAK,KAAK,MAAG,KAAK,MAAM;EAC9B;EAEA,OAAe;AACb,UAAMG,IAAI,UAAU,KAAK,KAAK,KAAK,IAAI;AACvC,WAAA,KAAK,KAAK,KAAK,IACf,KAAK,KAAK,KAAK,IACf,KAAK,KAAKA,KAAK,KAAK,IAAIA,IAAI,IACrB,KAAK;EACd;EAEA,IAAI,MAAMC,GAAc;AACtB,SAAK,IAAIA,EAAM,GACf,KAAK,KAAKA,EAAM,IAChB,KAAK,KAAKA,EAAM,IAChB,KAAK,KAAKA,EAAM;EAClB;EAEA,IAAI,QAAe;AACjB,WAAO,EACL,GAAG,KAAK,GACR,IAAI,KAAK,IACT,IAAI,KAAK,IACT,IAAI,KAAK,GACX;EACF;AACF;AAEA,SAASF,IAAO;AACd,MAAIG,IAAI;AACR,SAAO,SAAcC,GAA+B;AAClDA,QAAO,OAAOA,CAAI;AAClB,aAASC,IAAI,GAAGA,IAAID,EAAK,QAAQC,KAAK;AACpCF,WAAKC,EAAK,WAAWC,CAAC;AACtB,UAAIC,IAAI,sBAAsBH;AAC9BA,UAAIG,MAAM,GACVA,KAAKH,GACLG,KAAKH,GACLA,IAAIG,MAAM,GACVA,KAAKH,GACLA,KAAKG,IAAI;IACX;AACA,YAAQH,MAAM,KAAK;EACrB;AACF;AAEA,SAASI,EAAKT,GAAwB;AACpC,QAAMU,IAAK,IAAIX,EAAKC,CAAI,GAClBW,IAAO,MAAMD,EAAG,KAAA;AAEtB,SAAAC,EAAK,QAAQ,MAAOD,EAAG,KAAS,IAAA,aAAe,GAC/CC,EAAK,SAAS,MACZA,EAAK,KAAMA,EAAAA,IAAS,UAAY,KAAK,uBACvCA,EAAK,QAAQ,MAAMD,EAAG,OACtBC,EAAK,cAAeP,QAClBM,EAAG,QAAQN,GACJO,IAEFA;AACT;ACrGO,IAAMC,IAAgB;AAAtB,IAOMC,IAAiB,KAAK;AAK5B,IAAMC,IAAN,MAAoB;EACf;EACA;EACA;EAEV,YAAYC,GAAiC;AAC3C,SAAK,QAAQ,IAAI,MACfC,EAAoBD,CAAM,GAC1B,KAAK,qBACP,CAAA,GACA,KAAK,mBAAmB,KAAK,4BAC3B,KAAK,MAAM,iBACb;EACF;EAEA,IAAI,oBAA4B;AAC9B,WAAO,KAAK;EACd;EAEA,IAAI,KAAKf,GAAc;AACrB,SAAK,QAAQA;EACf;EASA,4BAA4BiB,GAAmC;AAC7D,QAAIA,KAAqB,KAAKA,IAAoB;AAChD,YAAM,IAAI,MAAM,uDAAuD;AAEzE,WAAO,GAAG,KAAK,IAAIA,GAAmB,IAAIL,CAAK,IAAI,KAAKC,GAAQ,QAAQ,CAAC;EAC3E;EAKA,IAAI,aAA6B;AAC/B,WAAO,KAAK;EACd;EAMA,IAAI,WAAWE,GAAiC;AAC9C,SAAK,kBAAkBA,CAAM;EAC/B;EAEU,uBAAqD;AAC7D,UAAMG,IAAQ;AACd,WAAO,EACL,KAAK,SACHC,GACAC,GACAxB,GACA;AACA,aAAIwB,MAAS,uBAAuB,OAAO,SAASxB,CAAK,MACvDsB,EAAM,mBAAmBA,EAAM,4BAC7B,OAAOtB,CAAK,CACd,IAEF,QAAQ,IAAIuB,GAAQC,GAAMxB,CAAK,GACxB;IACT,EACF;EACF;EAEQ,kBAAkBmB,GAAuC;AAC/D,UAAMM,IAAUL,EAAoBD,CAAM;AAC1C,eAAWO,KAAOD;AAChB,UAAIC,KAAO,KAAK,OAAO;AACrB,cAAMC,IAAWD;AACjB,aAAK,MAAMC,CAAQ,IAAIF,EAAQE,CAAQ;MACzC;EAEJ;EAUA,eAAeC,GAAkB;AAC/B,WAAO,KAAK,IAAI,KAAK,MAAM,EAAEA,IAAI,CAAC,GAAG,GAAG;EAC1C;EAWA,gBAAgBA,GAAkB;AAChC,WAAO,KAAK,qBACV,KAAK,MAAM,EAAE,CAAC,IAAI,KAAK,KAAKA,IAAI,KAAK,KAAK,MAAM,EAAE,CAAC,CAAC,IAAI,CAC1D;EACF;EASA,WAAWC,GAAapC,GAA2B;AACjD,QAAI,CAAC,KAAK,MAAM,eAAeoC,IAAM;AAAK,aAAO,KAAK,MAAMA,CAAG;AAE/D,UAAMC,IADYjB,EAAK,KAAK,KAAK,EACH,GACxB,EAAE,SAAAhB,GAAS,SAAAC,EAAQ,IAAIP,EAC3BsC,GACApC,GACA,KAAK,MAAM,gBACb;AACA,WAAO,KAAK,MAAMqC,KAAehC,IAAUD,IAAU,KAAKA,CAAO;EACnE;EAOA,cAAckC,GAAWtC,GAA2B;AAClD,UAAMuC,IAAc,KAAK,IACvB,KAAK,IAAI,GAAG,KAAK,MAAMD,IAAI,KAAK,gBAAgB,CAAC,GACjD,KAAK,MAAM,gBACb;AACA,WAAO,KAAK,WAAWC,GAAavC,CAAY;EAClD;EAUA,gBAAgBwC,GAAWL,GAAkB;AAC3C,UAAMM,IAASD,IAAI,KAAK,MAAM,EAAE,CAAC,KAAKL,IAAI;AAC1C,WAAO,KAAK,qBACV,KAAK,eAAe,KAAK,gBAAgBvC,EAAO,IAAI,GAAG6C,CAAM,CAC/D;EACF;EAOA,qBAAqBC,GAA4B;AAC/C,WAAO,KAAK,IAAI,KAAK,IAAI,CAACA,EAAW,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE;EACzD;EASA,eAAeC,GAAcC,GAAyB;AACpD,WAAO,EAAE,KAAK,MAAM,EAAE,CAAC,IAAID,KAAQ,IAAI,KAAK,MAAM,EAAE,CAAC,KAAKC,GAAS,QACjE,CACF;EACF;EAWA,sBAAsBJ,GAAWF,GAAWO,GAAWV,GAAkB;AACvE,UAAMW,IAAelD,EAAO,SAASuC,IAAI,KAAK,MAAM,EAAE,EAAE,IAAI,GACtDY,IAAanD,EAAO,SAASuC,IAAI,KAAK,MAAM,EAAE,EAAE,IAAI;AAC1D,WAAO,CAAC7B,EACNgC,KACG,IACC,KAAK,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC,KACrB,KAAKE,KACN,KAAK,IAAIF,GAAG,CAAC,KAAK,MAAM,EAAE,CAAC,CAAC,KAC3B,KAAK,KAAK,IAAIO,KAAK,KAAK,MAAM,EAAE,EAAE,CAAC,IAAI,KACxCC,IACAC,IACN,MACA,KACF,EAAE,QAAQ,CAAC;EACb;EAUA,sBAAsBP,GAAWF,GAAWO,GAAmB;AAC7D,WAAO,CAACvC,EACN,KAAK,MAAM,EAAE,EAAE,IACb,KAAK,IAAIkC,GAAG,CAAC,KAAK,MAAM,EAAE,EAAE,CAAC,KAC5B,KAAK,IAAIF,IAAI,GAAG,KAAK,MAAM,EAAE,EAAE,CAAC,IAAI,KACrC,KAAK,KAAK,IAAIO,KAAK,KAAK,MAAM,EAAE,EAAE,CAAC,GACrC,MACA,KACF,EAAE,QAAQ,CAAC;EACb;EAQA,0BAA0BP,GAAWH,GAAkB;AACrD,WAAO,CAAC7B,EACNgC,IAAI,KAAK,IAAI,KAAK,MAAM,EAAE,EAAE,KAAKH,IAAI,IAAI,KAAK,MAAM,EAAE,EAAE,EAAE,GAC1D,MACA,KACF,EAAE,QAAQ,CAAC;EACb;EASA,iBAAiBnC,GAAsBgD,GAA2B;AAChE,WAAO,CAAC,KAAK,IAAI,IAAKxB,IAASxB,IAAgBgD,GAAWzB,CAAK,EAAE,QAAQ,CAAC;EAC5E;AACF;AAAA,IC5PsB0B,ID4PtB,MC5P8D;EAClD;EACA;EACA;EACA,OAAkC,oBAAI;EACtC;EAEV,YACEC,GACAC,GACAC,GACA;AACA,SAAK,YAAYA,GAEjB,KAAK,OAAOC,EAAY,KAAKH,CAAI,GACjC,KAAK,UAAUG,EAAY,KAAKH,CAAI,GACpC,KAAK,cAAcG,EAAY,KAAKF,CAAG,GACvC,KAAK,KACP;EAAA;EAEQ,OAAO;AACb,UAAM,EAAE,OAAApC,GAAO,aAAAuC,EAAY,IAAI,KAAK;AACpC,QAAIvD,IAAW;AACXgB,UAAUwC,EAAM,OAAOD,MACzBvD,IAAW,KAAK,YAAY,KAAKuD,GAAqB,MAAM,IAE9D,KAAK,QAAQ,cAAc,KAAK,aAChC,KAAK,QAAQ,eAAevD,GAC5B,KAAK,QAAQ,QAAQ,GACrB,KAAK,SACP;EAAA;EAEO,UAAoB;AACzB,WAAO,EACL,CAACH,EAAO,KAAK,GAAG,KAAK,OAAOA,EAAO,KAAK,GACxC,CAACA,EAAO,IAAI,GAAG,KAAK,OAAOA,EAAO,IAAI,GACtC,CAACA,EAAO,IAAI,GAAG,KAAK,OAAOA,EAAO,IAAI,GACtC,CAACA,EAAO,IAAI,GAAG,KAAK,OAAOA,EAAO,IAAI,GACtC,CAAC,OAAO,QAAQ,GAAG,KAAK,gBAAgB,KAAK,IAAI,EACnD;EACF;EAEA,CAAS,kBAAmD;AAC1D,eAAW4D,KAAS7D;AAClB,YAAM,KAAK,OAAO6D,CAAK;EAE3B;EAEO,OAAOA,GAA6B;AACzC,UAAM,EAAE,OAAAzC,EAAM,IAAI,KAAK;AACvB,QAAI0C;AACJ,YAAQ1C,GACN;MAAA,KAAKwC,EAAM;AACTE,YAAO,KAAK,SAASD,CAAK;AAC1B;MACF,KAAKD,EAAM;MACX,KAAKA,EAAM;AACTE,YAAO,KAAK,cAAcD,CAAK;AAC/B;MACF,KAAKD,EAAM;AACTE,YAAO,KAAK,YAAYD,CAAK;AAC7B;IACJ;AACA,QAAIC;AACF,aAAOA;AAET,UAAM,IAAI,MAAM,eAAe;EACjC;EAQQ,WAAW;AACjB,UAAMC,IAAO,KAAK,YAAY,QACxBC,GAAAA,IAAO,KAAK,QAAQ,MACpBC,IAAM,KAAK,QAAQ,aAAa,KAAK,QAAQ;AACnD,SAAK,UAAU,OAAO,GAAGF,CAAI,IAAIC,CAAI,IAAIC,CAAG;EAC9C;EAEU,SAASC,GAA0B;AAC3C,UAAM,EAAE,aAAAP,GAAa,KAAAQ,GAAK,cAAA9D,EAAa,IAAI,KAAK;AAEhD,WAAO,EACL,QAAQ6D,GACR,OAAO,KAAK,QAAQ,OACpB,KAAKP,KAAeQ,GACpB,WAAW,KAAK,QAAQ,WACxB,YAAY,KAAK,QAAQ,YACzB,cAAc,KAAK,QAAQ,cAC3B,mBAAmB9D,GACnB,gBAAgB,KAAK,QAAQ,gBAC7B,QAAQ,KAAK,YACf;EACF;AACF;ACrGqB+D,IAAAA,IAAAA,cAAuBd,EAAkB;EACzC,SAASO,GAA6B;AACvD,UAAMQ,IAAQ,KAAK,KAAK,IAAIR,CAAK;AACjC,QAAIQ;AACF,aAAOA;AAET,UAAMC,IAAOZ,EAAY,KAAK,KAAK,OAAO;AAI1C,YAHAY,EAAK,aAAa,KAAK,UAAU,gBAAgBT,CAAK,GACtDS,EAAK,YAAY,KAAK,UAAU,eAAeT,CAAK,GAE5CA,GAAO;MACb,KAAK5D,EAAO;AACVqE,UAAK,iBAAiB,GACtBA,EAAK,MAAM,KAAK,YAAY,UAAU,CAAQ,GAC9CA,EAAK,QAAQV,EAAM;AACnB;MACF,KAAK3D,EAAO;AACVqE,UAAK,iBAAiB,GACtBA,EAAK,MAAM,KAAK,YAAY,UAAU,CAAQ,GAC9CA,EAAK,QAAQV,EAAM;AACnB;MACF,KAAK3D,EAAO;AACVqE,UAAK,iBAAiB,GACtBA,EAAK,MAAM,KAAK,YAAY,UAAU,EAAS,GAC/CA,EAAK,QAAQV,EAAM;AACnB;MACF,KAAK3D,EAAO,MAAM;AAChB,cAAMsE,IAAgB,KAAK,UAAU,cACnCD,EAAK,WACL,KAAK,QAAQ,YACf;AACAA,UAAK,iBAAiBC,GACtBD,EAAK,MAAM,KAAK,YAAY,UAAUC,GAAsB,IAAI,GAChED,EAAK,QAAQV,EAAM;AACnB;MACF;MACA;AACE,cAAM,IAAI,MAAM,eAAe;IACnC;AACA,UAAME,IAAO,EACX,MAAMQ,GACN,KAAK,KAAK,SAAST,CAAK,EAC1B;AACA,WAAA,KAAK,KAAK,IAAIA,GAAOC,CAAI,GAClBA;EACT;EAEmB,cAAcD,GAA6B;AAC5D,UAAMQ,IAAQ,KAAK,KAAK,IAAIR,CAAK;AACjC,QAAIQ;AACF,aAAOA;AAET,UAAM,EAAE,OAAAjD,GAAO,YAAA2B,GAAY,WAAAM,EAAU,IAAI,KAAK,MACxCiB,IAAOZ,EAAY,KAAK,KAAK,OAAO,GACpCtD,IAAW,KAAK,QAAQ;AAI9B,YAHAkE,EAAK,aAAa,KAAK,UAAU,gBAAgBvB,GAAYc,CAAK,GAClES,EAAK,YAAY,KAAK,UAAU,0BAA0BjB,GAAWQ,CAAK,GAElEA,GACN;MAAA,KAAK5D,EAAO,OAAO;AACjBqE,UAAK,iBAAiB,GACtBA,EAAK,MAAM,KAAK,YAAY,UAAU,GAAU,KAAK,GACrDA,EAAK,QAAQlD;AACb;MACF;MACA,KAAKnB,EAAO,MAAM;AAChBqE,UAAK,iBAAiB,GACtBA,EAAK,MAAM,KAAK,YAAY,UAAU,EAAS,GAC/CA,EAAK,QAAQlD;AACb;MACF;MACA,KAAKnB,EAAO,MAAM;AAChB,cAAMuE,IAAgB,KAAK,UAAU,cACnCF,EAAK,WACLlE,CACF;AACAkE,UAAK,iBAAiBE,GACtBF,EAAK,MAAM,KAAK,YAAY,UAAUE,GAAsB,IAAI,GAChEF,EAAK,QAAQV,EAAM;AACnB;MACF;MACA,KAAK3D,EAAO,MAAM;AAChB,cAAMwE,IAAiB,KAAK,UAAU,0BACpCpB,GACApD,EAAO,IACT,GACMuE,IAAgB,KAAK,UAAU,cACnCC,GACArE,CACF,GACMmE,IAAgB,KAAK,IACzB,KAAK,UAAU,cAAcD,EAAK,WAAWlE,CAAQ,GACrDoE,IAAgB,CAClB;AACAF,UAAK,iBAAiBC,GACtBD,EAAK,MAAM,KAAK,YAAY,UAAUC,GAAsB,IAAI,GAChED,EAAK,QAAQV,EAAM;AACnB;MACF;MACA;AACE,cAAM,IAAI,MAAM,eAAe;IACnC;AACA,UAAME,IAAO,EACX,MAAMQ,GACN,KAAK,KAAK,SAAST,CAAK,EAC1B;AACA,WAAK,KAAA,KAAK,IAAIA,GAAOC,CAAI,GAClBA;EACT;EAEmB,YAAYD,GAA6B;AAC1D,UAAMQ,IAAQ,KAAK,KAAK,IAAIR,CAAK;AACjC,QAAIQ;AACF,aAAOA;AAET,UAAMjE,IAAW,KAAK,QAAQ,cACxB,EAAE,YAAA2C,GAAY,WAAAM,EAAU,IAAI,KAAK,MACjCqB,IAAiB,KAAK,UAAU,iBAAiBtE,GAAUiD,CAAS,GACpEsB,IAAajB,EAAY,KAAK,KAAK,OAAO,GAC1CkB,IAAYlB,EAAY,KAAK,KAAK,OAAO,GACzCmB,IAAYnB,EAAY,KAAK,KAAK,OAAO,GACzCoB,IAAYpB,EAAY,KAAK,KAAK,OAAO;AAE/C,SAAK,QACHiB,GACAC,GACAC,GACAC,GACA/B,GACAM,GACAqB,CACF,GAEA,KAAK,cAAcC,GAAYC,GAAWC,GAAWC,GAAW1E,CAAQ,GACxE,KAAK,WAAWuE,GAAYC,GAAWC,GAAWC,CAAS,GAC3DH,EAAW,UAAU;AAErB,UAAMI,IAAa,EACjB,MAAMJ,GACN,KAAK,KAAK,SAAS1E,EAAO,KAAK,EACjC,GACM+E,IAAY,EAChB,MAAMJ,GACN,KAAK,MAAM,SAAS3E,EAAO,IAAI,EACjC,GACMgF,IAAY,EAChB,MAAMJ,GACN,KAAK,MAAM,SAAS5E,EAAO,IAAI,EACjC,GACMiF,IAAY,EAChB,MAAMJ,GACN,KAAK,MAAM,SAAS7E,EAAO,IAAI,EACjC;AAEA,WAAA,KAAK,KAAK,IAAIA,EAAO,OAAO8E,CAAU,GACtC,KAAK,KAAK,IAAI9E,EAAO,MAAM+E,CAAS,GACpC,KAAK,KAAK,IAAI/E,EAAO,MAAMgF,CAAS,GACpC,KAAK,KAAK,IAAIhF,EAAO,MAAMiF,CAAS,GAC7B,KAAK,KAAK,IAAIrB,CAAK;EAC5B;EAKQ,QACNc,GACAC,GACAC,GACAC,GACA/B,GACAM,GACAqB,GACM;AACNC,MAAW,aAAa,KAAK,UAAU,gBACrC5B,GACA9C,EAAO,KACT,GACA0E,EAAW,YAAY,KAAK,UAAU,sBACpC5B,GACAM,GACAqB,CACF,GACAE,EAAU,aAAa,KAAK,UAAU,gBACpC7B,GACA9C,EAAO,IACT,GACA2E,EAAU,YAAY,KAAK,UAAU,sBACnC7B,GACAM,GACAqB,GACAzE,EAAO,IACT,GACA4E,EAAU,aAAa,KAAK,UAAU,gBACpC9B,GACA9C,EAAO,IACT,GACA4E,EAAU,YAAY,KAAK,UAAU,sBACnC9B,GACAM,GACAqB,GACAzE,EAAO,IACT,GACA6E,EAAU,aAAa,KAAK,UAAU,gBACpC/B,GACA9C,EAAO,IACT,GACA6E,EAAU,YAAY,KAAK,UAAU,sBACnC/B,GACAM,GACAqB,GACAzE,EAAO,IACT;EACF;EAKQ,cACN0E,GACAC,GACAC,GACAC,GACA1E,GACM;AACN,QAAI+E,GAAoBX;AACxBW,QAAgB,KAAK,UAAU,cAAcP,EAAU,WAAWxE,CAAQ,GAC1EoE,IAAgB,KAAK,UAAU,cAAcK,EAAU,WAAWzE,CAAQ,GAC1E+E,IAAgB,KAAK,IAAIA,GAAeX,CAAa,GACrDA,IAAgB,KAAK,IAAIA,GAAeW,IAAgB,CAAC;AACzD,UAAMZ,IAAgB,KAAK,IACzB,KAAK,UAAU,cAAcO,EAAU,WAAW1E,CAAQ,GAC1DoE,IAAgB,CAClB;AACAG,MAAW,iBAAiB,GAC5BA,EAAW,MAAM,KAAK,YAAY,UAAU,CAAQ,GAEpDC,EAAU,iBAAiBO,GAC3BP,EAAU,MAAM,KAAK,YAAY,UAAUO,GAAe,IAAI,GAC9DN,EAAU,iBAAiBL,GAC3BK,EAAU,MAAM,KAAK,YAAY,UAAUL,GAAe,IAAI,GAE9DM,EAAU,iBAAiBP,GAC3BO,EAAU,MAAM,KAAK,YAAY,UAAUP,GAAe,IAAI;EAChE;EAKQ,WACNI,GACAC,GACAC,GACAC,GACA;AACAH,MAAW,QAAQf,EAAM,YAGzBgB,EAAU,QAAQhB,EAAM,QAExBiB,EAAU,QAAQjB,EAAM,QAExBkB,EAAU,QAAQlB,EAAM;EAC1B;AACF;AAAA,ICvQqBwB,IDuQrB,cCvQ+C9B,EAAkB;EAC5C,SAASO,GAA6B;AACvD,UAAMQ,IAAQ,KAAK,KAAK,IAAIR,CAAK;AACjC,QAAIQ;AACF,aAAOA;AAGT,SAAK,QAAQ,iBAAiB,GAC9B,KAAK,QAAQ,eAAe;AAE5B,UAAMM,IAAajB,EAAY,KAAK,KAAK,OAAO,GAC1CkB,IAAYlB,EAAY,KAAK,KAAK,OAAO,GACzCmB,IAAYnB,EAAY,KAAK,KAAK,OAAO,GACzCoB,IAAYpB,EAAY,KAAK,KAAK,OAAO;AAE/C,SAAK,QAAQiB,GAAYC,GAAWC,GAAWC,CAAS;AACxD,UAAMO,IAAiB;AAEvB,WAAA,KAAK,cACHV,GACAC,GACAC,GACAC,GACAO,CACF,GAEA,KAAK,WAAWV,GAAYC,GAAWC,GAAWC,CAAS,GAC3D,KAAK,YAAYH,GAAYC,GAAWC,GAAWC,CAAS,GACrD,KAAK,KAAK,IAAIjB,CAAK;EAC5B;EAEQ,QACNc,GACAC,GACAC,GACAC,GACM;AACNH,MAAW,aAAa,KAAK,UAAU,gBAAgB1E,EAAO,KAAK,GACnE0E,EAAW,YAAY,KAAK,UAAU,eAAe1E,EAAO,KAAK,GAEjE2E,EAAU,aAAa,KAAK,UAAU,gBAAgB3E,EAAO,IAAI,GACjE2E,EAAU,YAAY,KAAK,UAAU,eAAe3E,EAAO,IAAI,GAE/D4E,EAAU,aAAa,KAAK,UAAU,gBAAgB5E,EAAO,IAAI,GACjE4E,EAAU,YAAY,KAAK,UAAU,eAAe5E,EAAO,IAAI,GAE/D6E,EAAU,aAAa,KAAK,UAAU,gBAAgB7E,EAAO,IAAI,GACjE6E,EAAU,YAAY,KAAK,UAAU,eAAe7E,EAAO,IAAI;EACjE;EAKmB,cAAc4D,GAA6B;AAC5D,WAAO,KAAK,YAAYA,CAAK;EAC/B;EACmB,YAAYA,GAA6B;AAC1D,UAAMQ,IAAQ,KAAK,KAAK,IAAIR,CAAK;AACjC,QAAIQ;AACF,aAAOA;AAET,UAAMjE,IAAW,KAAK,QAAQ,cACxB,EAAE,YAAA2C,GAAY,WAAAM,EAAU,IAAI,KAAK,MACjCqB,IAAiB,KAAK,UAAU,iBAAiBtE,GAAUiD,CAAS,GACpEsB,IAAajB,EAAY,KAAK,KAAK,OAAO,GAC1CkB,IAAYlB,EAAY,KAAK,KAAK,OAAO,GACzCmB,IAAYnB,EAAY,KAAK,KAAK,OAAO,GACzCoB,IAAYpB,EAAY,KAAK,KAAK,OAAO;AAE/C,WAAA,KAAK,QACHiB,GACAC,GACAC,GACAC,GACA/B,GACAM,GACAqB,CACF,GAEA,KAAK,cAAcC,GAAYC,GAAWC,GAAWC,GAAW1E,CAAQ,GACxE,KAAK,WAAWuE,GAAYC,GAAWC,GAAWC,CAAS,GAC3DH,EAAW,UAAU,GAErB,KAAK,YAAYA,GAAYC,GAAWC,GAAWC,CAAS,GACrD,KAAK,KAAK,IAAIjB,CAAK;EAC5B;EAKQ,QACNc,GACAC,GACAC,GACAC,GACA/B,GACAM,GACAqB,GACM;AACNC,MAAW,aAAa,KAAK,UAAU,gBACrC5B,GACA9C,EAAO,KACT,GACA0E,EAAW,YAAY,KAAK,UAAU,sBACpC5B,GACAM,GACAqB,CACF,GACAE,EAAU,aAAa,KAAK,UAAU,gBACpC7B,GACA9C,EAAO,IACT,GACA2E,EAAU,YAAY,KAAK,UAAU,sBACnC7B,GACAM,GACAqB,GACAzE,EAAO,IACT,GACA4E,EAAU,aAAa,KAAK,UAAU,gBACpC9B,GACA9C,EAAO,IACT,GACA4E,EAAU,YAAY,KAAK,UAAU,sBACnC9B,GACAM,GACAqB,GACAzE,EAAO,IACT,GACA6E,EAAU,aAAa,KAAK,UAAU,gBACpC/B,GACA9C,EAAO,IACT,GACA6E,EAAU,YAAY,KAAK,UAAU,sBACnC/B,GACAM,GACAqB,GACAzE,EAAO,IACT;EACF;EAKQ,cACN0E,GACAC,GACAC,GACAC,GACA1E,GACM;AACN,QAAIkF,GACFH,GACAX,GACAD;AACFe,QAAiB,KAAK,UAAU,cAC9BX,EAAW,WACXvE,CACF,GACA+E,IAAgB,KAAK,UAAU,cAAcP,EAAU,WAAWxE,CAAQ,GAC1EoE,IAAgB,KAAK,UAAU,cAAcK,EAAU,WAAWzE,CAAQ,GAC1EmE,IAAgB,KAAK,UAAU,cAAcO,EAAU,WAAW1E,CAAQ,GAE1EkF,IAAiB,KAAK,IAAIA,GAAgBH,CAAa,GACvDA,IAAgB,KAAK,IAAIA,GAAeG,IAAiB,CAAC,GAC1Dd,IAAgB,KAAK,IAAIA,GAAeW,IAAgB,CAAC,GACzDZ,IAAgB,KAAK,IAAIA,GAAeC,IAAgB,CAAC,GAEzDG,EAAW,iBAAiBW,GAC5BX,EAAW,MAAM,KAAK,YAAY,UAAUW,GAAgB,IAAI,GAEhEV,EAAU,iBAAiBO,GAC3BP,EAAU,MAAM,KAAK,YAAY,UAAUO,GAAe,IAAI,GAE9DN,EAAU,iBAAiBL,GAC3BK,EAAU,MAAM,KAAK,YAAY,UAAUL,GAAe,IAAI,GAE9DM,EAAU,iBAAiBP,GAC3BO,EAAU,MAAM,KAAK,YAAY,UAAUP,GAAe,IAAI;EAChE;EAKQ,WACNI,GACAC,GACAC,GACAC,GACA;AACAH,MAAW,QAAQf,EAAM,QAGzBgB,EAAU,QAAQhB,EAAM,QAExBiB,EAAU,QAAQjB,EAAM,QAExBkB,EAAU,QAAQlB,EAAM;EAC1B;EAEQ,YACNe,GACAC,GACAC,GACAC,GACA;AACA,UAAMC,IAAa,EACjB,MAAMJ,GACN,KAAK,KAAK,SAAS1E,EAAO,KAAK,EACjC,GACM+E,IAAY,EAChB,MAAMJ,GACN,KAAK,MAAM,SAAS3E,EAAO,IAAI,EACjC,GACMgF,IAAY,EAChB,MAAMJ,GACN,KAAK,MAAM,SAAS5E,EAAO,IAAI,EACjC,GACMiF,IAAY,EAChB,MAAMJ,GACN,KAAK,MAAM,SAAS7E,EAAO,IAAI,EACjC;AAEA,SAAK,KAAK,IAAIA,EAAO,OAAO8E,CAAU,GACtC,KAAK,KAAK,IAAI9E,EAAO,MAAM+E,CAAS,GACpC,KAAK,KAAK,IAAI/E,EAAO,MAAMgF,CAAS,GACpC,KAAK,KAAK,IAAIhF,EAAO,MAAMiF,CAAS;EACtC;AACF;AAAA,IC3NaK,ID2Nb,MC3NwB;EACd;EAKR,YAAYC,GAAY;AACtB,SAAK,OAAOA;EACd;EASA,OAAOjC,GAAYkC,GAAgBvB,GAA8B;AAC/D,WAAO,KAAK,KAAK,KAAKX,GAAMkC,GAAUvB,CAAM;EAC9C;EAcA,mBACEX,GACAnC,GACAqE,GACApF,GACAgD,GACAN,GACAoB,GACe;AACf,QAAI,OAAO/C,IAAU;AACnB,YAAM,IAAI,MAAM,iDAAiD;AAEnE,QAAIsE,GACAC;AACJ,QAAWvE,MAAUwC,EAAM;AACzB8B,UAAM,EACJ,QAAQzF,EAAO,QACf,OAAOmB,GACP,KAAW+C,KAAOsB,GAClB,WAAWlC,EAAK,WAChB,YAAYA,EAAK,YACjB,cAAclD,GACd,mBAAmBkD,EAAK,cACxB,gBAAgBA,EAAK,gBACrB,QAAckC,EAChB,GACAE,IAAYC,EAAsBH,CAAQ,GAC1CE,EAAU,cAAcF;SACnB;AACL,UAAI,OAAOtB,IAAQ;AACjB,cAAM,IAAI,MAAM,+CAA+C;AAEjE,YAAM0B,IAAiB1B,EAAI,KAAKsB,GAAkB,MAAM;AACxDC,UAAM,EACJ,QAAQzF,EAAO,QACf,OAAcsD,EAAK,OACnB,KAAKA,EAAK,eAAeA,EAAK,KAC9B,WAAWA,EAAK,WAChB,YAAYA,EAAK,YACjB,cAAclD,GACd,mBAAmBkD,EAAK,cACxB,gBAAgBA,EAAK,gBACrB,QAAckC,EAChB,GACAE,IAAY,EACV,GAAGpC,GACH,OAAcnC,GACd,KAAW+C,GACX,aAAmBsB,GACnB,WAAWpC,KAAaE,EAAK,WAC7B,YAAYR,KAAcQ,EAAK,YAC/B,cAAclD,GACd,gBAAgBwF,GAChB,MAAMtC,EAAK,OAAO,EACpB;IACF;AAEA,WAAO,EAAE,MAAMoC,GAAW,KAAAD,EAAI;EAChC;EASA,WAAWI,GAAyBC,GAAwB;AAC1D,UAAMC,IAA+B,CAAA;AACrC,QAAIC,IAAWL,EAAsBE,EAAa,GAAG;AACrD,eAAWI,KAAUH,GAAS;AAC5B,UAAIjC;AAEJ,UADAoC,EAAO,SAASxC,EAAY,KAAKwC,EAAO,MAAM,GAC1CA,EAAO,WAAWjG,EAAO,QAAQ;AAEnC,YAAIG,IAAW;AACX6F,UAAS,UAAUrC,EAAM,OAAOqC,EAAS,gBAC3C7F,IAAW8F,EAAO,OAAO,KAAKD,EAAS,aAAqB,MAAM,IAEpEnC,IAAO,KAAK,mBACVmC,GACAC,EAAO,OACPA,EAAO,QACP9F,GACA8F,EAAO,WACPA,EAAO,YACPA,EAAO,MAAMxC,EAAY,KAAKwC,EAAO,GAAG,IAAI,MAC9C;MACF;AACEpC,YAAO,KAAK,OAAOmC,GAAUC,EAAO,QAAQA,EAAO,MAAM;AAE3DF,QAAY,KAAKlC,CAAI,GACrBmC,IAAWnC,EAAK;IAClB;AACA,WAAOkC;EACT;EAEA,sBACEF,GACAtC,GACA2C,GACAC,GACsB;AACtB,QAAI,CAACD;AACH,aAAO;AAGT,UAAM,EAAE,MAAME,GAAiB,KAAAX,EAAI,IAAIS,GACjCF,IAAiBvC,EAAY,KAAKoC,CAAY;AACpD,WAAIG,EAAS,IAAI,QAAQ,MAAMI,EAAgB,IAAI,QAAA,IAC1C,QAETJ,EAAS,iBAAiBI,EAAgB,IAAI,KAC5CJ,EAAS,KACT,MACF,GACO,KAAK,mBACVA,GACAI,EAAgB,OAChB3C,EAAY,KAAKF,CAAG,GACpBkC,EAAI,cACJU,IAAgBC,EAAgB,YAAY,QAC5CD,IAAgBC,EAAgB,aAAa,QAC7CA,EAAgB,GAClB;EACF;AACF;AC7Ja,IAAAC,IAAA,cAAaxE,EAAc;EAC9B;EACR,YAAYyE,GAAgC;AAC1C,UAAMA,CAAK;AACX,UAAM,EAAE,mBAAAC,EAAkB,IAAI,KAAK;AACnC,SAAK,YAAYA,IAAoBpC,IAAiBgB;EACxD;EAEmB,uBAAqD;AACtE,UAAMlD,IAAQ;AACd,WAAO,EACL,KAAK,SACHC,GACAC,GACAxB,GACA;AACA,aAAIwB,MAAS,uBAAuB,OAAO,SAASxB,CAAK,IACvDsB,EAAM,mBAAmBA,EAAM,4BAC7B,OAAOtB,CAAK,CACd,IACSwB,MAAS,wBAClBF,EAAM,YAAYtB,MAAU,OAAOwD,IAAiBgB,IAEtD,QAAQ,IAAIjD,GAAQC,GAAMxB,CAAK,GACxB;IACT,EACF;EACF;EA4DA,OACE2C,GACAC,GACAiD,GACG;AACH,UAAMC,IAAY,KAAK,WAEjBC,IADU,IAAID,EAAUnD,GAAMC,GAAK,IAA4B,EAC3C,QAAQ;AAClC,WAAIiD,KAAgB,OAAOA,KAAiB,aACnCA,EAAaE,CAAS,IAEtBA;EAEX;EAwDA,KACEpD,GACAC,GACAK,GACA4C,GACG;AACH,UAAMC,IAAY,KAAK,WACjBE,IAAU,IAAIF,EAAUnD,GAAMC,GAAK,IAA4B,GAC/DhB,IAAIkB,EAAY,OAAOG,CAAK;AAClC,QAAIrB,MAAMvC,EAAO;AACf,YAAM,IAAI,MAAM,+BAA+B;AAEjD,UAAM4G,IAAgBD,EAAQ,OAAOpE,CAAC;AACtC,WAAIiE,KAAgB,OAAOA,KAAiB,aACnCA,EAAaI,CAAa,IAE1BA;EAEX;EASA,mBACEtD,GACAC,GACAsD,IAAY,MACsB;AAClC,UAAMC,IAAgBrD,EAAY,KAAKH,CAAI;AAC3CC,QAAMA,IAAME,EAAY,KAAKF,CAAG,IAAI,oBAAI;AACxC,UAAMrC,IACJ4F,EAAc,UAAUnD,EAAM,MAC1B,KAAK,IAAIJ,EAAI,KAAKuD,EAAc,aAAqB,MAAM,GAAG,CAAC,IAC/D,GACA7D,IACJ6D,EAAc,UAAUnD,EAAM,MAC1B,KAAK,iBAAiBzC,GAAG,CAAC4F,EAAc,UAAU,QAAQ,CAAC,CAAC,IAC5D;AACN,WAAQD,IAAS,IAAI5D,IAAI,KAAK,QAAQ,CAAC,CAAC,MAAMA;EAGhD;EA2BA,SACEK,GACAmC,GACAe,GACG;AACH,UAAMM,IAAgBrD,EAAY,KAAKH,CAAI,GACrCyD,IAAetD,EAAY,WAAWgC,CAAG;AAC/C,QAAIsB,EAAa,WAAW/G,EAAO;AACjC,YAAM,IAAI,MAAM,iCAAiC;AAEnD,QAAIgH,GAAUtD,GAAauD;AAC3B,YAAQF,EAAa,OAAO;MAC1B,KAAKpD,EAAM;AACTqD,YAAWD,EAAa,KACxBrD,IAAc,QACduD,IAAc;AACd;MACF,KAAKtD,EAAM;MACX,KAAKA,EAAM;MACX,KAAKA,EAAM;AACTqD,YAAWD,EAAa,QACxBrD,IAAcqD,EAAa,KAC3BE,IACEH,EAAc,UACbC,EAAa,WAAW/G,EAAO,SAChC+G,EAAa,UAAUpD,EAAM,SACzB,IACA;AACN;IACJ;AAEA,UAAMuD,IAAiB,EACrB,GAAGJ,GACH,KAAKE,GACL,WAAWD,EAAa,WACxB,YAAYA,EAAa,YACzB,cAAcA,EAAa,mBAC3B,gBAAgBA,EAAa,gBAC7B,MAAM,KAAK,IAAI,GAAGD,EAAc,OAAO,CAAC,GACxC,QAAQ,KAAK,IAAI,GAAGG,CAAW,GAC/B,OAAOF,EAAa,OACpB,aAAarD,EACf;AACA,WAAI8C,KAAgB,OAAOA,KAAiB,aACnCA,EAAaU,CAAQ,IAErBA;EAEX;EAqDA,OACE5D,GACAC,GACA4D,IAAuB,OACvBX,GACG;AACH,UAAMM,IAAgBrD,EAAY,KAAKH,CAAI;AAC3CC,QAAME,EAAY,KAAKF,CAAG;AAC1B,UAAMqC,IACJkB,EAAc,UAAUnD,EAAM,MAC1B,IACAJ,EAAI,KAAKuD,EAAc,aAAqB,MAAM,GAClDM,IAAwB,EAC5B,QAAQpH,EAAO,QACf,OAAO8G,EAAc,OACrB,KAAKA,EAAc,KACnB,WAAWA,EAAc,WACzB,YAAYA,EAAc,YAC1B,cAAc,GACd,mBAAmBA,EAAc,cACjC,gBAAgBlB,GAChB,QAAQrC,EACV,GAaMqD,IAA+B,EAAE,MAZb,EACxB,GAAGE,GACH,KAAKvD,GACL,WAAW,GACX,YAAY,GACZ,cAAc,GACd,gBAAgB,GAChB,MAAM4D,IAAc,IAAIL,EAAc,MACtC,QAAQK,IAAc,IAAIL,EAAc,QACxC,OAAOnD,EAAM,KACb,aAAamD,EAAc,YAC7B,GAC0D,KAAKM,EAAW;AAC1E,WAAIZ,KAAgB,OAAOA,KAAiB,aACnCA,EAAaI,CAAa,IAE1BA;EAEX;EAwCA,WACEf,GACAC,IAAyB,CACzBuB,GAAAA,IAAyC,CAAC,GAC1B;AAChB,UAAM,EACJ,kBAAAC,GACA,gBAAAC,GACA,YAAYC,IAAa,MACzB,KAAKjE,IAAM,oBAAI,QACf,qBAAqBkE,IAAoB,MAC3C,IAAIJ;AACAE,SAAkB,OAAOA,KAAmB,cAC9CzB,EAAQ,KAAKyB,CAAc,GAEzBC,MACF1B,IAAUA,EAAQ,OAAQG,OAAWA,EAAO,WAAWjG,EAAO,MAAM;AAEtE,UAAM0H,IAAgB,IAAIpC,EAAW,IAAI,GAEnCS,IAAc2B,EAAc,WAChCL,EAAQ,cAAc1B,EAAgB,GACtCG,CACF,GACM6B,IAAM5B,EAAY,QAClBC,IAAWvC,EAAY,KAAKoC,CAAY,GACxC+B,IAAcF,EAAc,sBAChC1B,GACAzC,GACAoE,IAAM5B,EAAY4B,IAAM,CAAC,IAAI,QAC7BF,CACF;AAEA,WAAIH,KAAoB,OAAOA,KAAqB,aAC3C,EACL,aAAavB,EAAY,IAAIuB,CAAgB,GAC7C,iBAAiBM,IAAcN,EAAiBM,CAAW,IAAI,KACjE,IAEK,EACL,aAAA7B,GACA,iBAAiB6B,EACnB;EACF;AACF;AAmBO,IAAMrC,IAAQzD,OACZ,IAAIuE,EAAKvE,KAAU,CAAE,CAAA;;;AC3evB,SAAS,MAAM,MAAM;AAE1B,QAAM,SAAS,CAAC,GAAG,KAAK,SAAS,aAAa,CAAC;AAE/C,MAAI,QAAQ,IAAI,OAAO,qCAAqC,IAAI;AAChE,QAAM,SAAS,CAAC,GAAG,KAAK,SAAS,KAAK,CAAC;AAGvC,QAAM,QAAQ,OAAO,OAAO,MAAM;AAClC,MAAI,OAAO,CAAC;AACZ,WAAQ+F,KAAI,GAAEA,KAAI,MAAM,QAAQA,MAAK;AACnC,QAAI,WAAW,KAAK,MAAMA,EAAC,EAAE,CAAC,IAAI,MAAMA,EAAC,EAAE,CAAC,CAAC;AAC7C,SAAK,QAAQ,IAAI,CAAC;AAClB,SAAK,QAAQ,EAAE,OAAO,IAAI,MAAMA,EAAC,EAAE,CAAC,EAAE,QAAQ,SAAS,EAAE,EAAE,QAAQ,mBAAmB,qBAAqB,EAAE,QAAQ,eAAe,WAAW;AAC/I,SAAK,QAAQ,EAAE,MAAM,IAAI,MAAMA,EAAC,EAAE,CAAC,EAAE,QAAQ,gBAAgB,MAAQ,EAAE,QAAQ,mBAAmB,qBAAqB,EAAE,QAAQ,eAAe,WAAW;AAAA,EAC7J;AAIA,SAAO;AACT;AAEA,eAAsB,WAAW,MAAM;AACnC,UAAQ,IAAI,iBAAiB,IAAI;AACjC,QAAM,kBAAU,IAAI,CAAC,kBAAkB,IAAI,CAAE;AACjD;AAEA,eAAsB,WAAW,MAAM;AACrC,UAAQ,IAAI,oBAAoB;AAEhC,MAAI,OAAO,MAAM,cAAM,SAAS,IAAI;AACpC,MAAI,KAAK,MAAM,IAAI;AACnB,MAAI,UAAU,OAAO,KAAK,EAAE;AAC5B,UAAQ,IAAI,mCAAmC;AAC/C,MAAI,OAAO,MAAM,kBAAU,IAAI,CAAC,kBAAkB,IAAI,CAAC;AACvD,UAAQ,IAAI,kCAAkC;AAC9C,MAAI,MAAM,oBAAI,KAAK;AACnB,QAAM,IAAI,EAAK;AAEf,MAAI,QAAQ,QAAW;AAErB,QAAI,OAAO,CAAC;AACZ,SAAK,OAAO,IAAI,CAAC;AACjB,SAAK,eAAe,IAAI,QAAQ;AAChC,YAAQ,QAAQ,CAACC,OAAM;AACjB,UAAI,aAAa,EAAgB,oBAAI,KAAK,CAAC;AAC3C,WAAK,OAAO,EAAEA,EAAC,IAAI,CAAC;AACpB,WAAK,OAAO,EAAEA,EAAC,EAAE,OAAO,IAAI,GAAGA,EAAC,EAAE,OAAO;AACzC,WAAK,OAAO,EAAEA,EAAC,EAAE,MAAM,IAAI,GAAGA,EAAC,EAAE,MAAM;AACvC,WAAK,OAAO,EAAEA,EAAC,EAAE,YAAY,IAAI;AAAA,IACrC,CAAC;AACH,UAAM,kBAAU,IAAI,CAAC,kBAAkB,IAAI,GAAG,IAAI;AAAA,EACpD,OAAO;AACL,QAAI,OAAO,MAAM,cAAM,YAAY,IAAI;AACvC,QAAI,mBAAmB,IAAI,KAAK,KAAK,cAAc,CAAC;AAGpD,QAAK,iBAAiB,QAAQ,IAAI,KAAK,cAAe;AACpD,cAAQ,IAAI,2BAA2B;AACvC,UAAI,YAAY,OAAO,KAAK,KAAK,OAAO,CAAC;AACzC,cAAQ,QAAQ,CAACA,OAAM;AACrB,YAAG,CAAC,UAAU,SAASA,EAAC,GAAE;AAExB,cAAI,aAAa,EAAgB,oBAAI,KAAK,CAAC;AAC3C,eAAK,OAAO,EAAEA,EAAC,IAAI,CAAC;AACpB,eAAK,OAAO,EAAEA,EAAC,EAAE,OAAO,IAAI,GAAGA,EAAC,EAAE,OAAO;AACzC,eAAK,OAAO,EAAEA,EAAC,EAAE,MAAM,IAAI,GAAGA,EAAC,EAAE,MAAM;AACvC,eAAK,OAAO,EAAEA,EAAC,EAAE,YAAY,IAAI;AAAA,QACnC;AAAA,MACF,CAAC;AACD,gBAAU,QAAQ,CAACA,OAAM;AACvB,YAAG,CAAC,QAAQ,SAASA,EAAC,GAAE;AACtB,iBAAO,KAAK,OAAO,EAAEA,EAAC;AAAA,QACxB;AAAA,MACF,CAAC;AACD,WAAK,eAAe,IAAI,QAAQ;AAChC,YAAM,kBAAU,IAAI,CAAC,kBAAkB,IAAI,GAAG,IAAI;AAAA,IACpD;AAAA,EACF;AACA,UAAQ,IAAI,kBAAkB;AAC9B,SAAO;AAET;AAEA,eAAsB,WAAW,MAAM,MAAM,QAAQ,QAAQ;AAE3D,QAAM,IAAI,EAAK;AACf,MAAI,UAAU,SAAS;AAAE,QAAI,cAAc,EAAE,KAAK,KAAK,OAAO,EAAE,MAAM,EAAE,YAAY,GAAG,oBAAI,KAAK,GAAG,EAAO,KAAK;AAAA,EAAE;AAAC;AAClH,MAAI,UAAU,QAAQ;AAAE,QAAI,cAAc,EAAE,KAAK,KAAK,OAAO,EAAE,MAAM,EAAE,YAAY,GAAG,oBAAI,KAAK,GAAG,EAAO,IAAI;AAAA,EAAE;AAAC;AAChH,MAAI,UAAU,QAAQ;AAAE,QAAI,cAAc,EAAE,KAAK,KAAK,OAAO,EAAE,MAAM,EAAE,YAAY,GAAG,oBAAI,KAAK,GAAG,EAAO,IAAI;AAAA,EAAE;AAAC;AAChH,MAAI,UAAU,QAAQ;AAAE,QAAI,cAAc,EAAE,KAAK,KAAK,OAAO,EAAE,MAAM,EAAE,YAAY,GAAG,oBAAI,KAAK,GAAG,EAAO,IAAI;AAAA,EAAE;AAAC;AAGhH,OAAK,OAAO,EAAE,MAAM,EAAE,YAAY,IAAI,YAAY,MAAM;AAExD,QAAM,kBAAU,IAAI,CAAC,kBAAkB,IAAI,GAAG,IAAI;AAClD,SAAO;AACT;AAEA,eAAsB,gBAAgB;AACpC,UAAQ,IAAI,uBAAuB;AACnC,QAAM,SAAS,MAAM,eAAO,eAAe,sBAAsB,cAAa,MAAM;AACpF,MAAI,UAAU,CAAC;AACf,WAAQ,IAAI,GAAE,IAAI,OAAO,QAAQ,KAAK;AACpC,QAAI,OAAO,OAAO,CAAC,EAAE,MAAM;AAC3B,YAAQ,IAAI,IAAI,MAAM,WAAW,IAAI;AAAA,EACvC;AACA,UAAQ,IAAI,qBAAqB;AACjC,SAAO;AACT;AAEO,SAAS,iBAAiB,MAAM,OAAO;AAC5C,MAAI,QAAQ,MAAM,IAAI,EAAE,OAAO;AAC/B,MAAI,aAAa,OAAO,KAAK,KAAK;AAClC,MAAI,WAAW,CAAC;AAChB,QAAM,OAAO,oBAAI,KAAK,GAAG,QAAQ;AACjC,aAAW,QAAQ,CAACA,OAAM;AACxB,QAAI,cAAc,IAAI,KAAK,MAAMA,EAAC,EAAE,YAAY,EAAE,KAAK,CAAC;AACxD,QAAI,YAAY,QAAQ,IAAI,KAAK;AAC/B,eAASA,EAAC,IAAI,MAAMA,EAAC;AAAA,IACvB;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAGA,eAAsB,YAAY;AAChC,UAAQ,IAAI,mBAAmB;AAC/B,QAAM,QAAQ,oBAAI,KAAK;AACvB,QAAM,QAAQ,MAAM,cAAc;AAClC,QAAM,aAAa,OAAO,KAAK,KAAK;AACpC,MAAI,YAAY,MAAM,cAAM,UAAU,aAAY,mBAAmB;AACrE,QAAM,UAAU,MAAM,cAAM,UAAU,aAAY,iBAAiB;AACnE,WAAQA,KAAI,GAAEA,KAAI,WAAW,QAAQA,MAAK;AACxC,QAAI,OAAO,WAAWA,EAAC;AACvB,QAAI,aAAa,OAAO,KAAK,MAAM,IAAI,EAAE,OAAO,CAAC,EAAE;AACnD,QAAI,WAAW,iBAAiB,MAAM,KAAK;AAC3C,QAAI,gBAAiB,OAAO,KAAK,QAAQ,EAAG;AAC5C,QAAG,gBAAgB,GAAG;AACpB,mBAAa,gMAAqM,OAAO,uCAAwC,OAAO,2CAA2C,gBAAgB,0GAA2G,OAAM,iEAAuE,OAAO;AAAA,IACpgB,OAAO;AACL,mBAAa,6JAA6J,OAAO,2CAA2C,gBAAgB,0GAA2G,OAAM,iEAAuE,OAAO;AAAA,IAC7a;AAAA,EAEF;AAEA,UAAQ,IAAI,uBAAuB,oBAAI,KAAK,GAAG,QAAQ,IAAI,MAAM,QAAQ,EAAE;AAC3E,QAAM,eAAO,UAAU,SAAS,IAAI,WAAW,OAAQ;AAEzD;AAEA,eAAsB,UAAU,MAAM;AAEpC,UAAQ,IAAI,mBAAmB;AAC/B,QAAM,WAAW,MAAM,cAAM,UAAU,aAAa,mBAAmB;AACvE,MAAI,SAAS,aAAc,OAAO;AAClC,YAAU,MAAM,cAAM,UAAU,aAAa,iBAAiB;AAC9D,QAAM,eAAO,UAAU,SAAS,IAAI,UAAU,MAAO;AACrD,UAAQ,IAAI,iBAAiB;AAC/B;;;ACvJA,IAAM,kBAAkB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAEF;AAGA,IAAM,WAAW;AAAA,EACf,QAAQ;AAAA,EACR,UAAU;AAAA,IACR,mBAAmB;AAAA,MACjB,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,IACA,qBAAqB;AAAA,MACnB,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,IACA,qBAAqB;AAAA,MACnB,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,IACA,mBAAmB;AAAA,MACjB,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,cAAc;AAAA,MACZ,QAAQ;AAAA,IACV;AAAA,IACA,cAAc;AAAA,MACZ,QAAQ;AAAA,IACV;AAAA,IACA,cAAc;AAAA,MACZ,QAAQ;AAAA,IACV;AAAA,IACA,aAAa;AAAA,MACX,QAAQ;AAAA,IACV;AAAA,IACA,aAAa;AAAA,MACX,QAAQ;AAAA,MACR,WAAW;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,OAAO,EAAC,UAAU,gBAAe;AAE9C,qBAAqB,iBAAiB,UAAU,KAAK,WAAW;",
  "names": ["functionMapping", "manifest", "syscall", "syscall", "newWindow", "syscall", "syscall", "base64Decode", "base64Decode", "syscall", "syscall", "query", "State", "t", "Rating", "e", "TypeConvert", "card", "value", "firstLetter", "restOfString", "ret", "timestamp", "log", "default_request_retention", "default_maximum_interval", "default_w", "default_enable_fuzz", "default_enable_short_term", "generatorParameters", "props", "w", "default_w", "default_request_retention", "default_maximum_interval", "default_enable_fuzz", "default_enable_short_term", "createEmptyCard", "now", "afterHandler", "emptyCard", "TypeConvert", "State", "t", "isDay", "date_scheduler", "pre", "unit", "date_diff", "formatDate", "last_review", "timeUnit", "show_diff_message", "fixDate", "diff", "r", "dateInput", "date", "year", "month", "day", "hours", "minutes", "seconds", "padZero", "num", "TIMEUNIT", "TIMEUNITFORMAT", "due", "i", "value", "Grades", "Rating", "FUZZ_RANGES", "get_fuzz_range", "interval", "elapsed_days", "maximum_interval", "delta", "range", "min_ivl", "max_ivl", "clamp", "value", "min", "max", "Alea", "seed", "mash", "Mash", "t", "state", "n", "data", "i", "h", "alea", "xg", "prng", "DECAY", "FACTOR", "FSRSAlgorithm", "params", "generatorParameters", "request_retention", "_this", "target", "prop", "_params", "key", "paramKey", "g", "ivl", "fuzz_factor", "s", "newInterval", "d", "next_d", "difficulty", "init", "current", "r", "hard_penalty", "easy_bound", "stability", "AbstractScheduler", "card", "now", "algorithm", "TypeConvert", "last_review", "State", "grade", "item", "time", "reps", "mul", "rating", "due", "BasicScheduler", "exist", "next", "easy_interval", "good_interval", "good_stability", "retrievability", "next_again", "next_hard", "next_good", "next_easy", "item_again", "item_hard", "item_good", "item_easy", "hard_interval", "LongTermScheduler", "first_interval", "again_interval", "Reschedule", "fsrs", "reviewed", "log", "next_card", "createEmptyCard", "scheduled_days", "current_card", "reviews", "collections", "cur_card", "review", "record_log_item", "update_memory", "reschedule_card", "FSRS", "param", "enable_short_term", "afterHandler", "Scheduler", "recordLog", "instace", "recordLogItem", "format", "processedCard", "processedLog", "last_due", "last_lapses", "prevCard", "reset_count", "forget_log", "options", "recordLogHandler", "reviewsOrderBy", "skipManual", "updateMemoryState", "rescheduleSvc", "len", "manual_item", "j", "k"]
}
